# AI-Server/scripts/iq_candle_checker.py
import sys
import io
import time
import json
from iqoptionapi.stable_api import IQ_Option
from datetime import datetime, timedelta

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö utf-8 ‡∏ö‡∏ô Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# üîê ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
USERNAME = "your_email@example.com"
PASSWORD = "your_password"

def main():
    try:
        # ‡∏£‡∏±‡∏ö parameters ‡∏à‡∏≤‡∏Å Node.js
        if len(sys.argv) < 4:
            print(json.dumps({
                "error": "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ parameters: symbol entryTime round"
            }, ensure_ascii=False))
            sys.exit(1)
        
        symbol = sys.argv[1]  # ‡πÄ‡∏ä‡πà‡∏ô "EURUSD"
        entry_time_str = sys.argv[2]  # ‡πÄ‡∏ä‡πà‡∏ô "13:45"
        round_num = int(sys.argv[3])  # ‡πÄ‡∏ä‡πà‡∏ô 1
        
        candle_size = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ = 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option
        I_want_money = IQ_Option(USERNAME, PASSWORD)
        I_want_money.connect()
        
        if not I_want_money.check_connect():
            print(json.dumps({
                "error": "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ IQ Option ‡πÑ‡∏î‡πâ"
            }, ensure_ascii=False))
            sys.exit(1)
        
        # üïí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ
        target_timestamp = calculate_target_time(entry_time_str, round_num)
        
        if target_timestamp is None:
            print(json.dumps({
                "error": "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ"
            }, ensure_ascii=False))
            sys.exit(1)
        
        # üìà ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        candles = I_want_money.get_candles(symbol, candle_size, 100, target_timestamp)
        
        if not candles:
            print(json.dumps({
                "error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"
            }, ensure_ascii=False))
            sys.exit(1)
        
        # üîç ‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        candle_at_target = None
        for candle in candles:
            if candle['from'] == target_timestamp:
                candle_at_target = candle
                break
        
        if not candle_at_target:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            closest_candle = min(candles, key=lambda x: abs(x['from'] - target_timestamp))
            candle_at_target = closest_candle
        
        # üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        open_price = candle_at_target['open']
        close_price = candle_at_target['close']
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        if close_price > open_price:
            color = "green"  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô)
        elif close_price < open_price:
            color = "red"    # ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á)
        else:
            color = "doji"   # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        candle_time = datetime.fromtimestamp(candle_at_target['from'])
        display_time = candle_time.strftime("%H:%M")
        
        result = {
            "symbol": symbol,
            "time": display_time,
            "candle_size": "5min",
            "open": round(open_price, 5),
            "close": round(close_price, 5),
            "color": color,
            "round": round_num,
            "entry_time": entry_time_str,
            "target_timestamp": target_timestamp,
            "actual_timestamp": candle_at_target['from'],
            "volume": candle_at_target.get('volume', 0)
        }
        
        # ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ Node.js
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        print(json.dumps({
            "error": f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        }, ensure_ascii=False))
        sys.exit(1)

def calculate_target_time(entry_time_str, round_num):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"""
    try:
        print(f"üî¢ Calculating target time for {entry_time_str}, round {round_num}", file=sys.stderr)
        
        # ‡πÅ‡∏õ‡∏•‡∏á entry_time_str ‡πÄ‡∏õ‡πá‡∏ô datetime
        # ‡πÄ‡∏ä‡πà‡∏ô "17:45" -> datetime object
        hours, minutes = map(int, entry_time_str.split(':'))
        
        now = datetime.now()
        print(f"üïê Current time: {now.strftime('%Y-%m-%d %H:%M:%S')}", file=sys.stderr)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        entry_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
        print(f"üéØ Entry time: {entry_time.strftime('%Y-%m-%d %H:%M:%S')}", file=sys.stderr)
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏•‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≠‡∏ö 1)
        if round_num == 1 and entry_time < now:
            entry_time = entry_time + timedelta(days=1)
            print(f"‚è≠Ô∏è Entry time moved to next day: {entry_time.strftime('%Y-%m-%d %H:%M:%S')}", file=sys.stderr)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡πÜ
        # ‡∏£‡∏≠‡∏ö 1 = entry_time + 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        # ‡∏£‡∏≠‡∏ö 2 = entry_time + 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        # ‡∏£‡∏≠‡∏ö 3 = entry_time + 15 ‡∏ô‡∏≤‡∏ó‡∏µ
        # ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        target_time = entry_time + timedelta(minutes=5 * round_num)
        print(f"‚è∞ Target candle time for round {round_num}: {target_time.strftime('%Y-%m-%d %H:%M:%S')}", file=sys.stderr)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô timestamp
        timestamp = int(time.mktime(target_time.timetuple()))
        print(f"üìÖ Target timestamp: {timestamp}", file=sys.stderr)
        
        return timestamp
        
    except Exception as e:
        print(f"‚ùå Error calculating target time: {e}", file=sys.stderr)
        return None

if __name__ == "__main__":
    main()