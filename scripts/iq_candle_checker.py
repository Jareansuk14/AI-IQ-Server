#AI-Server/scripts/iq_candle_checker.py - ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
# -*- coding: utf-8 -*-
import sys
import io
import time
import json
from iqoptionapi.stable_api import IQ_Option
from datetime import datetime, timedelta

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö utf-8 ‡∏ö‡∏ô Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# üîê ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
USERNAME = "your_email@example.com"
PASSWORD = "your_password"

# ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å command line
if len(sys.argv) < 3:
    print(json.dumps({"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ symbol ‡πÅ‡∏•‡∏∞ target_time"}, ensure_ascii=False))
    sys.exit()

symbol = sys.argv[1]  # ‡πÄ‡∏ä‡πà‡∏ô "EURUSD"
target_time_str = sys.argv[2]  # ‡πÄ‡∏ä‡πà‡∏ô "13:45"
target_date_str = sys.argv[3] if len(sys.argv) > 3 else ""  # ‡πÄ‡∏ä‡πà‡∏ô "2023-12-01"

candle_size = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ = 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option
I_want_money = IQ_Option(USERNAME, PASSWORD)
I_want_money.connect()
if not I_want_money.check_connect():
    print(json.dumps({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ IQ Option ‡πÑ‡∏î‡πâ"}, ensure_ascii=False))
    sys.exit()

try:
    # üïí ‡πÅ‡∏õ‡∏•‡∏á target_time ‡πÄ‡∏õ‡πá‡∏ô timestamp
    target_hour, target_minute = map(int, target_time_str.split(':'))
    
    if target_date_str:
        # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        target_date = datetime.strptime(target_date_str, "%Y-%m-%d")
    else:
        # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        target_date = datetime.now()
    
    target_time = target_date.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
    if not target_date_str and target_time > datetime.now():
        target_time -= timedelta(days=1)

    target_timestamp = int(time.mktime(target_time.timetuple()))

    # üìà ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
    candles = I_want_money.get_candles(symbol, candle_size, 100, target_timestamp)

    # üîç ‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    candle_at_target = next((c for c in candles if c['from'] == target_timestamp), None)

    if candle_at_target:
        open_price = candle_at_target['open']
        close_price = candle_at_target['close']
        
        if close_price > open_price:
            color = "green"
        elif close_price < open_price:
            color = "red"
        else:
            color = "doji"

        result = {
            "symbol": symbol,
            "time": target_time.strftime("%H:%M"),
            "date": target_time.strftime("%Y-%m-%d"),
            "candle_size": "5min",
            "open": round(open_price, 5),
            "close": round(close_price, 5),
            "color": color,
            "timestamp": target_timestamp
        }
    else:
        result = {"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ {target_time_str}"}

except Exception as e:
    result = {"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}

# ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ Node.js
print(json.dumps(result, ensure_ascii=False))