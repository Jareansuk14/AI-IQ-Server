const { MongoClient } = require('mongodb');
const paymentService = require('./paymentService');
const lineService = require('./lineService');
require('dotenv').config();

class PaymentChecker {
  constructor() {
    this.mongoClient = null;
    this.isChecking = false;
  }

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB Gmail Integration
  async connectToEmailDB() {
    try {
      if (this.mongoClient) return this.mongoClient.db();
      
      this.mongoClient = new MongoClient(process.env.MONGODB_URI);
      await this.mongoClient.connect();
      console.log('PaymentChecker: Connected to MongoDB for email checking');
      return this.mongoClient.db();
    } catch (error) {
      console.error('PaymentChecker: Error connecting to MongoDB:', error);
      throw error;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  async checkNewEmails() {
    if (this.isChecking) {
      console.log('PaymentChecker: Already checking emails, skipping...');
      return;
    }

    this.isChecking = true;
    console.log('PaymentChecker: Starting email check for payments...');
    
    try {
      const db = await this.connectToEmailDB();
      const emailCollection = db.collection('emails');
      
      // ‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
      
      const unprocessedEmails = await emailCollection.find({
        receivedAt: { $gte: fiveMinutesAgo },
        paymentProcessed: { $ne: true }, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        'transactionData.transactionType': '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤',
        'transactionData.amount': { $exists: true }
      }).sort({ receivedAt: -1 }).toArray();

      console.log(`PaymentChecker: Found ${unprocessedEmails.length} unprocessed emails`);

      let processedCount = 0;
      
      for (const email of unprocessedEmails) {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          const matchedPayment = await paymentService.checkPaymentFromEmail(email);
          
          if (matchedPayment) {
            console.log(`PaymentChecker: Payment matched! User: ${matchedPayment.lineUserId}, Amount: ${matchedPayment.totalAmount}, Credits: ${matchedPayment.credits}`);
            
            // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            await this.notifyPaymentSuccess(matchedPayment);
            
            processedCount++;
          }
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
          await emailCollection.updateOne(
            { _id: email._id },
            { 
              $set: { 
                paymentProcessed: true,
                paymentProcessedAt: new Date()
              }
            }
          );
          
        } catch (error) {
          console.error(`PaymentChecker: Error processing email ${email._id}:`, error);
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          await emailCollection.updateOne(
            { _id: email._id },
            { 
              $set: { 
                paymentProcessed: true,
                paymentProcessError: error.message,
                paymentProcessedAt: new Date()
              }
            }
          );
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤
      await paymentService.expireOldTransactions();

      console.log(`PaymentChecker: Processed ${processedCount} payments from ${unprocessedEmails.length} emails`);
      
    } catch (error) {
      console.error('PaymentChecker: Error in checkNewEmails:', error);
    } finally {
      this.isChecking = false;
    }
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  async notifyPaymentSuccess(paymentTransaction) {
    try {
      const packageNames = {
        '1_credit': '1 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
        '10_credit': '10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
        '20_credit': '20 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
        '50_credit': '50 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
        '100_credit': '100 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
      };

      const message = {
        type: 'text',
        text: `üéâ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\nüí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${paymentTransaction.totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó\nüíé ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: ${paymentTransaction.credits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\nüì¶ ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à: ${packageNames[paymentTransaction.packageType]}\n\n‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£! ‚ú®`
      };

      await lineService.pushMessage(paymentTransaction.lineUserId, message);
      console.log(`PaymentChecker: Notification sent to user ${paymentTransaction.lineUserId}`);
      
    } catch (error) {
      console.error('PaymentChecker: Error sending payment notification:', error);
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  startAutoCheck(intervalMinutes = 2) {
    console.log(`PaymentChecker: Starting auto-check every ${intervalMinutes} minutes`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    this.checkNewEmails();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ X ‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(() => {
      this.checkNewEmails();
    }, intervalMinutes * 60 * 1000);
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  async stop() {
    try {
      if (this.mongoClient) {
        await this.mongoClient.close();
        this.mongoClient = null;
        console.log('PaymentChecker: MongoDB connection closed');
      }
    } catch (error) {
      console.error('PaymentChecker: Error closing MongoDB connection:', error);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö manual (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing)
  async manualCheck() {
    console.log('PaymentChecker: Starting manual check...');
    await this.checkNewEmails();
    console.log('PaymentChecker: Manual check completed');
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  async getCheckStats() {
    try {
      const db = await this.connectToEmailDB();
      const emailCollection = db.collection('emails');
      
      const stats = {
        totalEmails: await emailCollection.countDocuments(),
        processedEmails: await emailCollection.countDocuments({ paymentProcessed: true }),
        errorEmails: await emailCollection.countDocuments({ paymentProcessError: { $exists: true } }),
        recentEmails: await emailCollection.countDocuments({ 
          receivedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } 
        })
      };
      
      return stats;
    } catch (error) {
      console.error('PaymentChecker: Error getting stats:', error);
      return null;
    }
  }
}

module.exports = new PaymentChecker();