// AI-Server/services/resultTrackingService.js - Fixed Version (‡∏¢‡∏∂‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
const lineService = require('./lineService');
const iqOptionService = require('./iqOptionService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class ResultTrackingService {
  constructor() {
    this.trackingSessions = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    this.blockedUsers = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö users ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å block
  }

  // üáπüá≠ Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object ‡πÉ‡∏ô Asia/Bangkok timezone
  getBangkokTime() {
    return new Date(new Date().toLocaleString("en-US", {timeZone: "Asia/Bangkok"}));
  }

  // üáπüá≠ Helper: ‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô Bangkok time string
  formatBangkokTime(date, options = { hour: '2-digit', minute: '2-digit' }) {
    return date.toLocaleTimeString('th-TH', options);
  }

  // üïê Helper: ‡πÄ‡∏û‡∏¥‡πà‡∏° 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (format: "HH:MM")
  addFiveMinutesToTime(timeString) {
    try {
      if (!timeString || typeof timeString !== 'string') {
        console.log('‚ö†Ô∏è Invalid timeString:', timeString);
        return timeString;
      }

      // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
      const [hours, minutes] = timeString.split(':').map(Number);
      
      if (isNaN(hours) || isNaN(minutes)) {
        console.log('‚ö†Ô∏è Invalid time format:', timeString);
        return timeString;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object ‡πÉ‡∏ô Bangkok timezone
      const bangkokNow = this.getBangkokTime();
      const timeDate = new Date(bangkokNow);
      timeDate.setHours(hours, minutes, 0, 0);
      
      // ‡∏ö‡∏ß‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      const newTime = new Date(timeDate.getTime() + 5 * 60 * 1000);
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string format HH:MM
      const newTimeString = this.formatBangkokTime(newTime);
      
      console.log(`üïê Added 5 minutes: ${timeString} ‚Üí ${newTimeString}`);
      
      return newTimeString;
    } catch (error) {
      console.error('‚ùå Error adding 5 minutes to time:', error);
      return timeString; // fallback ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    }
  }

  // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
  calculateExpectedCheckTime(entryTime) {
    try {
      const [entryHour, entryMinute] = entryTime.split(':').map(Number);
      const bangkokNow = this.getBangkokTime();
      const entryDateTime = new Date(bangkokNow);
      entryDateTime.setHours(entryHour, entryMinute, 0, 0);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
      const checkDateTime = new Date(entryDateTime.getTime() + 5 * 60 * 1000);
      const checkTimeStr = this.formatBangkokTime(checkDateTime);
      
      console.log(`üßÆ Expected check time for entry ${entryTime}: ${checkTimeStr}`);
      return checkTimeStr;
    } catch (error) {
      console.error('‚ùå Error calculating expected check time:', error);
      return entryTime; // fallback
    }
  }

  // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì entryTime ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ lastCheckTime)
  calculateCurrentRoundEntryTime(session) {
    try {
      // ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å: ‡πÉ‡∏ä‡πâ entryTime ‡πÄ‡∏î‡∏¥‡∏°
      if (session.round === 1) {
        console.log(`üìä Round ${session.round} - Using original entry time: ${session.entryTime}`);
        return session.entryTime;
      }
      
      // ‡∏£‡∏≠‡∏ö 2-7: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      if (session.lastCheckTime) {
        console.log(`üìä Round ${session.round} - Using last check time as entry: ${session.lastCheckTime}`);
        console.log(`üîç Session lastCheckTime value: ${session.lastCheckTime}`);
        return session.lastCheckTime;
      }
      
      // üö® Debug: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ lastCheckTime
      console.log(`‚ö†Ô∏è Round ${session.round} - No lastCheckTime found!`);
      console.log(`üîç Session data:`, JSON.stringify(session, null, 2));
      
      // fallback: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 5-minute intervals
      const bangkokNow = this.getBangkokTime();
      const minutes = bangkokNow.getMinutes();
      const roundedMinutes = Math.floor(minutes / 5) * 5;
      
      const roundedTime = new Date(bangkokNow);
      roundedTime.setMinutes(roundedMinutes, 0, 0);
      
      const roundedTimeStr = this.formatBangkokTime(roundedTime);
      
      console.log(`üïê Fallback - Rounded time: ${roundedTimeStr}`);
      
      return roundedTimeStr;
      
    } catch (error) {
      console.error('‚ùå Error calculating current round entry time:', error);
      // fallback: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      return session.entryTime;
    }
  }

  // üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß - ‡∏¢‡∏∂‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
  async startTracking(userId, prediction, pair, entryTime) {
    try {
      console.log(`üéØ Starting tracking for user ${userId}`);
      console.log(`üìä ${pair} ${prediction} at ${entryTime}`);

      // Block user ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô
      this.blockedUsers.add(userId);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
      const session = {
        userId,
        pair,
        prediction, // CALL ‡∏´‡∏£‡∏∑‡∏≠ PUT
        entryTime,  // ‡πÄ‡∏ä‡πà‡∏ô "14:05"
        round: 1,
        maxRounds: 7,
        isActive: true,
        startedAt: this.getBangkokTime(), // Bangkok timezone
        results: [],
        lastCheckTime: null // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      };

      this.trackingSessions.set(userId, session);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á)
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚è∞ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${entryTime}\n‚è≥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô\nüéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: 1/7`
      });

      // üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏¢‡∏∂‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
      const delayMs = this.calculateCheckDelay(entryTime);
      
      console.log(`üïê Will check result at: ${this.getCheckTimeDisplay(entryTime)}`);
      console.log(`‚è≥ Delay: ${Math.round(delayMs / 1000)} seconds`);

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      setTimeout(() => {
        this.checkResult(userId);
      }, delayMs);

      return true;
    } catch (error) {
      console.error('Error starting tracking:', error);
      // Remove block ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
      this.blockedUsers.delete(userId);
      this.trackingSessions.delete(userId);
      throw error;
    }
  }

  // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (‡πÉ‡∏ä‡πâ Asia/Bangkok ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  calculateCheckDelay(entryTime) {
    try {
      // üáπüá≠ ‡πÉ‡∏ä‡πâ Asia/Bangkok timezone ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const bangkokNow = this.getBangkokTime();
      const currentTime = this.formatBangkokTime(bangkokNow);
      
      console.log(`üìä Current time (Bangkok): ${currentTime}`);
      console.log(`‚è∞ Entry time: ${entryTime}`);
      
      // ‡πÅ‡∏õ‡∏•‡∏á entryTime ‡πÄ‡∏õ‡πá‡∏ô Date object ‡πÉ‡∏ô Bangkok timezone
      const [entryHour, entryMinute] = entryTime.split(':').map(Number);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á entryDateTime ‡πÉ‡∏ô Bangkok timezone
      const entryDateTime = new Date(bangkokNow);
      entryDateTime.setHours(entryHour, entryMinute, 0, 0);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (entryDateTime <= bangkokNow) {
        entryDateTime.setDate(entryDateTime.getDate() + 1);
        console.log(`üìÖ Entry time moved to next day: ${this.formatBangkokTime(entryDateTime, { 
          year: 'numeric', 
          month: '2-digit', 
          day: '2-digit', 
          hour: '2-digit', 
          minute: '2-digit' 
        })}`);
      }
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÉ‡∏ô Bangkok timezone
      const checkDateTime = new Date(entryDateTime.getTime() + 5 * 60 * 1000);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠
      let delayMs = checkDateTime.getTime() - bangkokNow.getTime();
      
      console.log(`üïê Entry DateTime (Bangkok): ${this.formatBangkokTime(entryDateTime)}`);
      console.log(`üîç Check DateTime (Bangkok): ${this.formatBangkokTime(checkDateTime)}`);
      console.log(`‚è≥ Raw delay: ${delayMs} ms (${Math.round(delayMs / 1000)} seconds)`);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      if (delayMs <= 0) {
        console.log('‚ö†Ô∏è Check time has passed, will check in 5 seconds');
        delayMs = 5000;
      }
      
      return delayMs;
    } catch (error) {
      console.error('‚ùå Error calculating delay:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ (default)
      return 5 * 60 * 1000;
    }
  }

  // üïê ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (‡πÉ‡∏ä‡πâ Asia/Bangkok ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  getCheckTimeDisplay(entryTime) {
    try {
      // üáπüá≠ ‡πÉ‡∏ä‡πâ Asia/Bangkok timezone ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const bangkokNow = this.getBangkokTime();
      
      const [entryHour, entryMinute] = entryTime.split(':').map(Number);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á entryDateTime ‡πÉ‡∏ô Bangkok timezone
      const entryDateTime = new Date(bangkokNow);
      entryDateTime.setHours(entryHour, entryMinute, 0, 0);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (entryDateTime <= bangkokNow) {
        entryDateTime.setDate(entryDateTime.getDate() + 1);
      }
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
      const checkDateTime = new Date(entryDateTime.getTime() + 5 * 60 * 1000);
      
      return this.formatBangkokTime(checkDateTime);
    } catch (error) {
      return 'Unknown';
    }
  }

  // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö 2-7)
  async checkResult(userId) {
    try {
      const session = this.trackingSessions.get(userId);
      if (!session || !session.isActive) {
        console.log(`‚ùå Session not found or inactive for user ${userId}`);
        return;
      }

      console.log(`üîç Checking result for user ${userId}, round ${session.round}`);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}...\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà`
      });

      // üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì entryTime ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
      let effectiveEntryTime;
      
      if (session.round === 1) {
        // ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å: ‡πÉ‡∏ä‡πâ entryTime ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
        effectiveEntryTime = session.entryTime;
        console.log(`üìä Round 1 - Using original entry time: ${effectiveEntryTime}`);
      } else {
        // ‡∏£‡∏≠‡∏ö 2-7: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        effectiveEntryTime = this.calculateCurrentRoundEntryTime(session);
        console.log(`üìä Round ${session.round} - Calculated entry time: ${effectiveEntryTime}`);
      }

      // üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ entryTime ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const candleResult = await iqOptionService.getCurrentCandle(session.pair, effectiveEntryTime);

      console.log(`üìä Candle result:`, candleResult);

      if (candleResult.error) {
        throw new Error(candleResult.error);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡πâ
      const isWin = this.checkWinLose(session.prediction, candleResult.color);
      
      console.log(`üéØ Prediction: ${session.prediction}, Candle: ${candleResult.color}, Result: ${isWin ? 'WIN' : 'LOSE'}`);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
      session.results.push({
        round: session.round,
        candleColor: candleResult.color,
        prediction: session.prediction,
        isWin,
        time: this.getBangkokTime(), // Bangkok timezone
        entryTime: effectiveEntryTime, // ‡πÉ‡∏ä‡πâ entryTime ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
        checkTime: candleResult.time
      });

      // üéØ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ú‡∏¥‡∏î
      const calculatedCheckTime = this.calculateExpectedCheckTime(effectiveEntryTime);
      session.lastCheckTime = calculatedCheckTime;
      
      console.log(`üéØ Saved lastCheckTime: ${calculatedCheckTime} for next round`);

      if (isWin) {
        // ‡∏ä‡∏ô‡∏∞ - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await this.handleWin(userId, session, candleResult, effectiveEntryTime);
      } else {
        // ‡πÅ‡∏û‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        await this.handleLose(userId, session, candleResult, effectiveEntryTime);
      }

    } catch (error) {
      console.error(`‚ùå Error checking result for user ${userId}:`, error);
      
      // üîÑ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      if (error.message.includes('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô')) {
        await lineService.pushMessage(userId, {
          type: 'text',
          text: `‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô...\n\nüí° ${error.message}\n\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`
        });

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          this.checkResult(userId);
        }, 60000);
      } else {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        await lineService.pushMessage(userId, {
          type: 'text',
          text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•\n\nüí° ${error.message}\n\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`
        });

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          this.checkResult(userId);
        }, 30000);
      }
    }
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  checkWinLose(prediction, candleColor) {
    if (prediction === 'CALL' && candleColor === 'green') {
      return true; // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ CALL ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏ä‡∏ô‡∏∞
    }
    if (prediction === 'PUT' && candleColor === 'red') {
      return true; // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ PUT ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á = ‡∏ä‡∏ô‡∏∞
    }
    return false; // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ = ‡πÅ‡∏û‡πâ
  }

  // üéâ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
  async handleWin(userId, session, candleResult, effectiveEntryTime) {
    try {
      console.log(`üéâ User ${userId} WON at round ${session.round}`);

      // ‡∏õ‡∏¥‡∏î session
      session.isActive = false;
      this.blockedUsers.delete(userId);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      const entryTimeDisplay = effectiveEntryTime;
      const checkTimeDisplay = this.addFiveMinutesToTime(candleResult.time); // üî• ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${entryTimeDisplay}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô: ${checkTimeDisplay}\nüé® ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}`
      });

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const continueMessage = createContinueTradeMessage();
      await lineService.pushMessage(userId, continueMessage);

      // ‡∏•‡∏ö session ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (cleanup)
      setTimeout(() => {
        this.trackingSessions.delete(userId);
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('Error handling win:', error);
    }
  }

  // ‚ùå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
  async handleLose(userId, session, candleResult, effectiveEntryTime) {
    try {
      console.log(`‚ùå User ${userId} LOST at round ${session.round}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (session.round >= session.maxRounds) {
        // ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await this.handleMaxRoundsReached(userId, session, candleResult, effectiveEntryTime);
        return;
      }

      // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö - ‡∏ó‡∏≥‡∏ï‡πà‡∏≠
      session.round++;

      const entryTimeDisplay = effectiveEntryTime;
      const checkTimeDisplay = this.addFiveMinutesToTime(candleResult.time); // üî• ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚ùå ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round - 1}: ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüìä ${session.pair}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${entryTimeDisplay}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô: ${checkTimeDisplay}\nüé® ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüîÑ ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}/${session.maxRounds}\n‚è≥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ...`
      });

      // üéØ ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      const nextCheckDelay = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏ï‡πá‡∏°
      
      console.log(`üîÑ Next check in ${nextCheckDelay / 1000} seconds`);
      
      setTimeout(() => {
        this.checkResult(userId);
      }, nextCheckDelay);

    } catch (error) {
      console.error('Error handling lose:', error);
    }
  }

  // üíÄ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
  async handleMaxRoundsReached(userId, session, candleResult, effectiveEntryTime) {
    try {
      console.log(`üíÄ User ${userId} LOST all 7 rounds`);

      // ‡∏õ‡∏¥‡∏î session
      session.isActive = false;
      this.blockedUsers.delete(userId);

      const entryTimeDisplay = effectiveEntryTime;
      const checkTimeDisplay = this.addFiveMinutesToTime(candleResult.time); // üî• ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${entryTimeDisplay}\nüïØÔ∏è ‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô: ${checkTimeDisplay}\nüé® ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüìà ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤!\nüí™ ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô`
      });

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const continueMessage = createContinueTradeMessage();
      await lineService.pushMessage(userId, continueMessage);

      // ‡∏•‡∏ö session
      setTimeout(() => {
        this.trackingSessions.delete(userId);
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('Error handling max rounds:', error);
    }
  }

  // üö´ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ñ‡∏π‡∏Å block ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  isUserBlocked(userId) {
    return this.blockedUsers.has(userId);
  }

  // üìä ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  getSession(userId) {
    return this.trackingSessions.get(userId);
  }

  // üõë ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö force (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  forceStopTracking(userId) {
    const session = this.trackingSessions.get(userId);
    if (session) {
      session.isActive = false;
    }
    this.blockedUsers.delete(userId);
    this.trackingSessions.delete(userId);
    console.log(`üõë Force stopped tracking for user ${userId}`);
  }

  // üìà ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•)
  getTrackingStats() {
    return {
      activeSessions: this.trackingSessions.size,
      blockedUsers: this.blockedUsers.size,
      sessions: Array.from(this.trackingSessions.values()).map(session => ({
        userId: session.userId,
        pair: session.pair,
        prediction: session.prediction,
        round: session.round,
        isActive: session.isActive,
        startedAt: session.startedAt,
        entryTime: session.entryTime,
        nextCheckTime: session.entryTime ? this.getCheckTimeDisplay(session.entryTime) : 'Unknown'
      }))
    };
  }

  // üö´ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å user ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á)
  async handleBlockedUserMessage(userId) {
    const session = this.trackingSessions.get(userId);
    if (session) {
      return lineService.pushMessage(userId, {
        type: 'text',
        text: `üö´ ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ${session.pair}\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\nüí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"`
      });
    }
  }

  // ‚úã ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  async cancelTracking(userId) {
    const session = this.trackingSessions.get(userId);
    if (session && session.isActive) {
      session.isActive = false;
      this.blockedUsers.delete(userId);
      this.trackingSessions.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${session.entryTime}\n\nüí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`
      });

      return true;
    }
    return false;
  }

  // üîß Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤)
  async debugTracking(userId) {
    try {
      console.log(`üîß Debug tracking for user ${userId}`);
      
      const session = this.trackingSessions.get(userId);
      if (!session) {
        console.log('‚ùå No session found');
        return { error: 'No session found' };
      }

      const nextCheckTime = this.getCheckTimeDisplay(session.entryTime);
      const delayMs = this.calculateCheckDelay(session.entryTime);
      
      console.log(`üìä Session data:`, JSON.stringify(session, null, 2));
      console.log(`üïê Next check time: ${nextCheckTime}`);
      console.log(`‚è≥ Delay: ${Math.round(delayMs / 1000)} seconds`);
      
      return {
        session,
        nextCheckTime,
        delaySeconds: Math.round(delayMs / 1000),
        isBlocked: this.isUserBlocked(userId)
      };
    } catch (error) {
      console.error('Debug error:', error);
      return { error: error.message };
    }
  }
}

module.exports = new ResultTrackingService();