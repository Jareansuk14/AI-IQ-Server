// AI-Server/services/resultTrackingService.js - Two Phase Fixed Version
const lineService = require('./lineService');
const iqOptionService = require('./iqOptionService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class ResultTrackingService {
  constructor() {
    this.trackingSessions = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    this.blockedUsers = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö users ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å block
    this.pendingSessions = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö session ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î
  }

  // üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• (‡πÅ‡∏ö‡∏ö 2 Phase - ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°)
  async startTracking(userId, prediction, pair, entryTime) {
    try {
      console.log(`üéØ Starting TWO-PHASE tracking for user ${userId}`);
      console.log(`üìä ${pair} ${prediction} at ${entryTime}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á pending session (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° tracking)
      const pendingSession = {
        userId,
        pair,
        prediction,
        entryTime,
        createdAt: new Date()
      };

      this.pendingSessions.set(userId, pendingSession);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡πÑ‡∏°‡πà block user)
      const nextEntryTime = this.getNextTradeTime(entryTime);
      const checkTime = this.getCheckTime(nextEntryTime);
      
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üöÄ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Binary Options\n\nüìä ‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô: ${pair}\nüí° ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: ${prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${nextEntryTime}\nüîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ï‡∏≠‡∏ô: ${checkTime}\n\n‚è≥ ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤...\nüéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: 1/7`
      });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î
      const waitTime = this.calculateWaitTime(nextEntryTime);
      
      console.log(`‚è∞ Entry time: ${nextEntryTime}`);
      console.log(`üïê Check time: ${checkTime}`);
      console.log(`‚è≥ Wait time: ${Math.round(waitTime / 1000)} seconds`);

      if (waitTime > 0) {
        // Phase 1: ‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î
        setTimeout(() => {
          this.startActualTracking(userId, nextEntryTime);
        }, waitTime);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏° tracking ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        console.log('‚ö†Ô∏è Entry time has passed, starting tracking immediately');
        this.startActualTracking(userId, nextEntryTime);
      }

      return true;
    } catch (error) {
      console.error('Error starting tracking:', error);
      this.pendingSessions.delete(userId);
      throw error;
    }
  }

  // üìÖ ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
  getNextTradeTime(entryTime) {
    try {
      const [hour, minute] = entryTime.split(':').map(Number);
      const now = new Date();
      const entryDateTime = new Date();
      entryDateTime.setHours(hour, minute, 0, 0);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (+ 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
      if (entryDateTime <= now) {
        entryDateTime.setMinutes(entryDateTime.getMinutes() + 5);
      }

      return entryDateTime.toTimeString().slice(0, 5); // "HH:MM"
    } catch (error) {
      console.error('Error calculating next trade time:', error);
      return entryTime;
    }
  }

  // üïê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
  getCheckTime(entryTime) {
    try {
      const [hour, minute] = entryTime.split(':').map(Number);
      const entryDateTime = new Date();
      entryDateTime.setHours(hour, minute, 0, 0);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      const checkDateTime = new Date(entryDateTime.getTime() + 5 * 60 * 1000);
      
      return checkDateTime.toTimeString().slice(0, 5); // "HH:MM"
    } catch (error) {
      console.error('Error calculating check time:', error);
      return 'Unknown';
    }
  }

  // ‚è≥ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î
  calculateWaitTime(entryTime) {
    try {
      const [hour, minute] = entryTime.split(':').map(Number);
      const now = new Date();
      const entryDateTime = new Date();
      entryDateTime.setHours(hour, minute, 0, 0);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
      if (entryDateTime < now) {
        entryDateTime.setDate(entryDateTime.getDate() + 1);
      }

      const waitMs = entryDateTime.getTime() - now.getTime();
      return Math.max(0, waitMs);
    } catch (error) {
      console.error('Error calculating wait time:', error);
      return 5000; // default 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
  }

  // üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° tracking ‡∏à‡∏£‡∏¥‡∏á (Phase 2 - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î)
  async startActualTracking(userId, entryTime) {
    try {
      const pendingSession = this.pendingSessions.get(userId);
      if (!pendingSession) {
        console.log(`‚ùå No pending session found for user ${userId}`);
        return;
      }

      console.log(`üöÄ Starting ACTUAL tracking for user ${userId} at ${entryTime}`);

      // Block user ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á active session
      this.blockedUsers.add(userId);
      
      const session = {
        userId: pendingSession.userId,
        pair: pendingSession.pair,
        prediction: pendingSession.prediction,
        entryTime,
        round: 1,
        maxRounds: 7,
        isActive: true,
        startedAt: new Date(),
        results: []
      };

      this.trackingSessions.set(userId, session);
      this.pendingSessions.delete(userId);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° tracking
      const checkTime = this.getCheckTime(entryTime);
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ${session.pair} ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${entryTime}\nüîç ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ï‡∏≠‡∏ô: ${checkTime}\n\n‚è≥ ‡∏£‡∏≠‡∏ú‡∏•‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ...\nüéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: ${session.round}/${session.maxRounds}`
      });

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        this.checkResult(userId);
      }, 5 * 60 * 1000); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏ï‡πá‡∏°

    } catch (error) {
      console.error('Error starting actual tracking:', error);
      this.pendingSessions.delete(userId);
      this.blockedUsers.delete(userId);
    }
  }

  // üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
  async checkResult(userId) {
    try {
      const session = this.trackingSessions.get(userId);
      if (!session || !session.isActive) {
        console.log(`‚ùå Session not found or inactive for user ${userId}`);
        return;
      }

      console.log(`üîç Checking result for user ${userId}, round ${session.round}`);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}...\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà`
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      const candleResult = await iqOptionService.getCurrentCandle(session.pair);

      console.log(`üìä Candle result:`, candleResult);

      if (candleResult.error) {
        throw new Error(candleResult.error);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•
      const isWin = this.checkWinLose(session.prediction, candleResult.color);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
      session.results.push({
        round: session.round,
        candleColor: candleResult.color,
        prediction: session.prediction,
        isWin,
        time: new Date(),
        entryTime: session.entryTime,
        checkTime: candleResult.time
      });

      if (isWin) {
        await this.handleWin(userId, session, candleResult);
      } else {
        await this.handleLose(userId, session, candleResult);
      }

    } catch (error) {
      console.error(`‚ùå Error checking result for user ${userId}:`, error);
      
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•\n\nüí° ${error.message}\n\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`
      });

      setTimeout(() => {
        this.checkResult(userId);
      }, 30000);
    }
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ
  checkWinLose(prediction, candleColor) {
    if (prediction === 'CALL' && candleColor === 'green') {
      return true;
    }
    if (prediction === 'PUT' && candleColor === 'red') {
      return true;
    }
    return false;
  }

  // üéâ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
  async handleWin(userId, session, candleResult) {
    try {
      console.log(`üéâ User ${userId} WON at round ${session.round}`);

      session.isActive = false;
      this.blockedUsers.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${session.entryTime}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô: ${candleResult.time}\nüé® ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}`
      });

      const continueMessage = createContinueTradeMessage();
      await lineService.pushMessage(userId, continueMessage);

      setTimeout(() => {
        this.trackingSessions.delete(userId);
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('Error handling win:', error);
    }
  }

  // ‚ùå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
  async handleLose(userId, session, candleResult) {
    try {
      console.log(`‚ùå User ${userId} LOST at round ${session.round}`);

      if (session.round >= session.maxRounds) {
        await this.handleMaxRoundsReached(userId, session, candleResult);
        return;
      }

      session.round++;

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚ùå ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round - 1}: ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüìä ${session.pair}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${session.entryTime}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô: ${candleResult.time}\nüé® ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüîÑ ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}/${session.maxRounds}\n‚è≥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ...`
      });

      // ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        this.checkResult(userId);
      }, 5 * 60 * 1000);

    } catch (error) {
      console.error('Error handling lose:', error);
    }
  }

  // üíÄ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö
  async handleMaxRoundsReached(userId, session, candleResult) {
    try {
      console.log(`üíÄ User ${userId} LOST all 7 rounds`);

      session.isActive = false;
      this.blockedUsers.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${session.entryTime}\nüïØÔ∏è ‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏¥‡∏î‡∏ï‡∏≠‡∏ô: ${candleResult.time}\nüé® ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüìà ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤!\nüí™ ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô`
      });

      const continueMessage = createContinueTradeMessage();
      await lineService.pushMessage(userId, continueMessage);

      setTimeout(() => {
        this.trackingSessions.delete(userId);
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('Error handling max rounds:', error);
    }
  }

  // üö´ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ñ‡∏π‡∏Å block ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isUserBlocked(userId) {
    return this.blockedUsers.has(userId);
  }

  // üìä ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getSession(userId) {
    return this.trackingSessions.get(userId);
  }

  // üìã ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pending session
  getPendingSession(userId) {
    return this.pendingSessions.get(userId);
  }

  // üõë ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö force
  forceStopTracking(userId) {
    const session = this.trackingSessions.get(userId);
    if (session) {
      session.isActive = false;
    }
    this.blockedUsers.delete(userId);
    this.trackingSessions.delete(userId);
    this.pendingSessions.delete(userId);
    console.log(`üõë Force stopped tracking for user ${userId}`);
  }

  // üìà ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  getTrackingStats() {
    return {
      activeSessions: this.trackingSessions.size,
      pendingSessions: this.pendingSessions.size,
      blockedUsers: this.blockedUsers.size,
      sessions: Array.from(this.trackingSessions.values()).map(session => ({
        userId: session.userId,
        pair: session.pair,
        prediction: session.prediction,
        round: session.round,
        isActive: session.isActive,
        startedAt: session.startedAt,
        entryTime: session.entryTime
      })),
      pending: Array.from(this.pendingSessions.values()).map(session => ({
        userId: session.userId,
        pair: session.pair,
        prediction: session.prediction,
        entryTime: session.entryTime,
        createdAt: session.createdAt
      }))
    };
  }

  // üö´ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å user ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async handleBlockedUserMessage(userId) {
    const session = this.trackingSessions.get(userId);
    if (session) {
      const checkTime = this.getCheckTime(session.entryTime);
      return lineService.pushMessage(userId, {
        type: 'text',
        text: `üö´ ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}/${session.maxRounds}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${session.entryTime}\nüîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ï‡∏≠‡∏ô: ${checkTime}\n\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n\nüí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"`
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pending session
    const pendingSession = this.pendingSessions.get(userId);
    if (pendingSession) {
      const nextEntryTime = this.getNextTradeTime(pendingSession.entryTime);
      const checkTime = this.getCheckTime(nextEntryTime);
      return lineService.pushMessage(userId, {
        type: 'text',
        text: `‚è≥ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î\n\nüìä ${pendingSession.pair}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${pendingSession.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${nextEntryTime}\nüîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ï‡∏≠‡∏ô: ${checkTime}\n\nüí° ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n\nüí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"`
      });
    }
  }

  // ‚úã ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async cancelTracking(userId) {
    const session = this.trackingSessions.get(userId);
    const pendingSession = this.pendingSessions.get(userId);
    
    if (session && session.isActive) {
      session.isActive = false;
      this.blockedUsers.delete(userId);
      this.trackingSessions.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${session.entryTime}\n\nüí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`
      });

      return true;
    }

    if (pendingSession) {
      this.pendingSessions.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${pendingSession.pair}\nüí° ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${pendingSession.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${pendingSession.entryTime}\n\nüí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`
      });

      return true;
    }
    
    return false;
  }

  // üîß Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
  async debugTracking(userId) {
    try {
      console.log(`üîß Debug tracking for user ${userId}`);
      
      const session = this.trackingSessions.get(userId);
      const pendingSession = this.pendingSessions.get(userId);
      
      return {
        session,
        pendingSession,
        isBlocked: this.isUserBlocked(userId),
        currentTime: new Date().toLocaleTimeString('th-TH', { 
          hour: '2-digit', 
          minute: '2-digit',
          timeZone: 'Asia/Bangkok'
        })
      };
    } catch (error) {
      console.error('Debug error:', error);
      return { error: error.message };
    }
  }
}

module.exports = new ResultTrackingService();