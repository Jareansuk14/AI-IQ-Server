//AI-Server/services/resultTrackingService.js
const lineService = require('./lineService');
const iqOptionService = require('./iqOptionService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class ResultTrackingService {
  constructor() {
    this.trackingSessions = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    this.blockedUsers = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö users ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å block
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
  async startTracking(userId, prediction, pair, entryTime) {
    try {
      console.log(`üéØ Starting result tracking for user ${userId}`);
      console.log(`üìä ${pair} ${prediction} at ${entryTime}`);

      // Block user ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô
      this.blockedUsers.add(userId);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á tracking session
      const session = {
        userId,
        pair,
        prediction, // CALL ‡∏´‡∏£‡∏∑‡∏≠ PUT
        entryTime,
        round: 1,
        maxRounds: 7,
        isActive: true,
        startedAt: new Date(),
        results: []
      };

      this.trackingSessions.set(userId, session);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ${pair}\n\nüìä ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${entryTime}\nüéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: 1/7\n\n‚è≥ ‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô...`
      });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      const checkTime = this.calculateCheckTime(entryTime, 1);
      const delayMs = checkTime.getTime() - Date.now();

      console.log(`‚è∞ Will check result at: ${checkTime.toISOString()}`);
      console.log(`‚è±Ô∏è Delay: ${Math.round(delayMs / 1000)} seconds`);

      // ‡∏ï‡∏±‡πâ‡∏á timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      setTimeout(() => {
        this.checkResult(userId);
      }, delayMs);

      return true;
    } catch (error) {
      console.error('Error starting tracking:', error);
      // Remove block ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
      this.blockedUsers.delete(userId);
      this.trackingSessions.delete(userId);
      throw error;
    }
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
  calculateCheckTime(entryTimeStr, round) {
    // entryTimeStr = "13:45"
    const [hours, minutes] = entryTimeStr.split(':').map(Number);
    
    const now = new Date();
    const entryTime = new Date();
    entryTime.setHours(hours, minutes, 0, 0);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if (entryTime <= now) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡πà‡∏≠‡∏ô
      if (round === 1) {
        entryTime.setDate(entryTime.getDate() + 1);
      }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° 5 ‡∏ô‡∏≤‡∏ó‡∏µ * ‡∏£‡∏≠‡∏ö ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
    const checkTime = new Date(entryTime.getTime() + (5 * 60 * 1000 * round));
    
    return checkTime;
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏à‡∏≤‡∏Å IQ Option
  async checkResult(userId) {
    try {
      const session = this.trackingSessions.get(userId);
      if (!session || !session.isActive) {
        console.log(`‚ùå Session not found or inactive for user ${userId}`);
        return;
      }

      console.log(`üîç Checking result for user ${userId}, round ${session.round}`);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}...\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà`
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å IQ Option API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      const candleResult = await iqOptionService.getCandleColor(
        session.pair,
        session.entryTime,
        session.round
      );

      console.log(`üìä Candle result:`, candleResult);

      if (candleResult.error) {
        throw new Error(candleResult.error);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡πâ
      const isWin = this.checkWinLose(session.prediction, candleResult.color);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
      session.results.push({
        round: session.round,
        candleColor: candleResult.color,
        prediction: session.prediction,
        isWin,
        time: new Date()
      });

      if (isWin) {
        // ‡∏ä‡∏ô‡∏∞ - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await this.handleWin(userId, session, candleResult);
      } else {
        // ‡πÅ‡∏û‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        await this.handleLose(userId, session, candleResult);
      }

    } catch (error) {
      console.error(`‚ùå Error checking result for user ${userId}:`, error);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•\n\nüí° ${error.message}\n\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`
      });

      // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        this.checkResult(userId);
      }, 30000);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏∞/‡πÅ‡∏û‡πâ
  checkWinLose(prediction, candleColor) {
    if (prediction === 'CALL' && candleColor === 'green') {
      return true; // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ CALL ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏ä‡∏ô‡∏∞
    }
    if (prediction === 'PUT' && candleColor === 'red') {
      return true; // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ PUT ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á = ‡∏ä‡∏ô‡∏∞
    }
    return false; // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ = ‡πÅ‡∏û‡πâ
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
  async handleWin(userId, session, candleResult) {
    try {
      console.log(`üéâ User ${userId} WON at round ${session.round}`);

      // ‡∏õ‡∏¥‡∏î session
      session.isActive = false;
      this.blockedUsers.delete(userId);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}\nüéØ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${candleResult.time}\n\nüèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}`
      });

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const continueMessage = createContinueTradeMessage();
      await lineService.pushMessage(userId, continueMessage);

      // ‡∏•‡∏ö session ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (cleanup)
      setTimeout(() => {
        this.trackingSessions.delete(userId);
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('Error handling win:', error);
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
  async handleLose(userId, session, candleResult) {
    try {
      console.log(`‚ùå User ${userId} LOST at round ${session.round}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (session.round >= session.maxRounds) {
        // ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await this.handleMaxRoundsReached(userId, session, candleResult);
        return;
      }

      // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö - ‡∏ó‡∏≥‡∏ï‡πà‡∏≠
      session.round++;

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚ùå ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round - 1}: ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüìä ${session.pair}\nüéØ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüîÑ ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}/${session.maxRounds}\n‚è≥ ‡∏£‡∏≠‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...`
      });

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
      setTimeout(() => {
        this.checkResult(userId);
      }, 5 * 60 * 1000); // 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    } catch (error) {
      console.error('Error handling lose:', error);
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö
  async handleMaxRoundsReached(userId, session, candleResult) {
    try {
      console.log(`üíÄ User ${userId} LOST all 7 rounds`);

      // ‡∏õ‡∏¥‡∏î session
      session.isActive = false;
      this.blockedUsers.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair}\nüéØ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\nüïØÔ∏è ‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${candleResult.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : 'üî¥ ‡πÅ‡∏î‡∏á'}\n\nüìà ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤!\nüí™ ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô`
      });

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const continueMessage = createContinueTradeMessage();
      await lineService.pushMessage(userId, continueMessage);

      // ‡∏•‡∏ö session
      setTimeout(() => {
        this.trackingSessions.delete(userId);
      }, 60 * 60 * 1000);

    } catch (error) {
      console.error('Error handling max rounds:', error);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ñ‡∏π‡∏Å block ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isUserBlocked(userId) {
    return this.blockedUsers.has(userId);
  }

  // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getSession(userId) {
    return this.trackingSessions.get(userId);
  }

  // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö force (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
  forceStopTracking(userId) {
    const session = this.trackingSessions.get(userId);
    if (session) {
      session.isActive = false;
    }
    this.blockedUsers.delete(userId);
    this.trackingSessions.delete(userId);
    console.log(`üõë Force stopped tracking for user ${userId}`);
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  getTrackingStats() {
    return {
      activeSessions: this.trackingSessions.size,
      blockedUsers: this.blockedUsers.size,
      sessions: Array.from(this.trackingSessions.values()).map(session => ({
        userId: session.userId,
        pair: session.pair,
        prediction: session.prediction,
        round: session.round,
        isActive: session.isActive,
        startedAt: session.startedAt
      }))
    };
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å user ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async handleBlockedUserMessage(userId) {
    const session = this.trackingSessions.get(userId);
    if (session) {
      return lineService.pushMessage(userId, {
        type: 'text',
        text: `üö´ ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}/${session.maxRounds}\nüéØ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n\nüí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"`
      });
    }
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (user request)
  async cancelTracking(userId) {
    const session = this.trackingSessions.get(userId);
    if (session && session.isActive) {
      session.isActive = false;
      this.blockedUsers.delete(userId);
      this.trackingSessions.delete(userId);

      await lineService.pushMessage(userId, {
        type: 'text',
        text: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.round}\nüéØ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${session.prediction}\n\nüí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß`
      });

      return true;
    }
    return false;
  }
}

module.exports = new ResultTrackingService();