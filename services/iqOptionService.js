//AI-Server/services/iqOptionService.js
const { exec } = require('child_process');
const path = require('path');

class IQOptionService {
  constructor() {
    this.pythonScriptPath = path.join(__dirname, '../scripts/iq_candle_checker.py');
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å IQ Option
  async getCandleColor(pair, entryTime, round) {
    return new Promise((resolve) => {
      try {
        console.log(`üêç Calling Python script for ${pair} at ${entryTime}, round ${round}`);

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IQ Option format
        const iqPair = this.convertPairToIQFormat(pair);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Python ‡∏û‡∏£‡πâ‡∏≠‡∏° parameters
        const command = `python3 "${this.pythonScriptPath}" "${iqPair}" "${entryTime}" ${round}`;
        
        console.log(`üîß Command: ${command}`);

        exec(command, { timeout: 30000 }, (error, stdout, stderr) => {
          if (error) {
            console.error(`‚ùå Python execution error: ${error.message}`);
            resolve({
              error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option ‡πÑ‡∏î‡πâ: ${error.message}`,
              pair: iqPair,
              entryTime,
              round
            });
            return;
          }

          if (stderr) {
            console.error(`‚ö†Ô∏è Python stderr: ${stderr}`);
            // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ stderr ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ stdout ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
          }

          try {
            console.log(`üì§ Python stdout:`, stdout);
            
            // ‡πÅ‡∏õ‡∏•‡∏á JSON result
            const result = JSON.parse(stdout.trim());
            
            if (result.error) {
              console.error(`‚ùå IQ Option API error: ${result.error}`);
              resolve({
                error: result.error,
                pair: iqPair,
                entryTime,
                round
              });
              return;
            }

            console.log(`‚úÖ Successfully got candle data:`, result);
            
            resolve({
              pair: result.symbol || iqPair,
              time: result.time,
              candleSize: result.candle_size,
              open: result.open,
              close: result.close,
              color: result.color, // 'green', 'red', ‡∏´‡∏£‡∏∑‡∏≠ 'doji'
              round,
              entryTime,
              timestamp: new Date().toISOString()
            });

          } catch (parseError) {
            console.error(`‚ùå JSON parse error: ${parseError.message}`);
            console.log(`üìù Raw stdout:`, stdout);
            
            resolve({
              error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${parseError.message}`,
              rawOutput: stdout,
              pair: iqPair,
              entryTime,
              round
            });
          }
        });

      } catch (err) {
        console.error(`‚ùå Unexpected error in getCandleColor: ${err.message}`);
        resolve({
          error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`,
          pair,
          entryTime,
          round
        });
      }
    });
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IQ Option format
  convertPairToIQFormat(pair) {
    const pairMap = {
      'EUR/USD': 'EURUSD',
      'GBP/USD': 'GBPUSD',
      'USD/JPY': 'USDJPY',
      'USD/CHF': 'USDCHF',
      'AUD/USD': 'AUDUSD',
      'NZD/USD': 'NZDUSD',
      'USD/CAD': 'USDCAD',
      'EUR/GBP': 'EURGBP',
      'EUR/JPY': 'EURJPY',
      'GBP/JPY': 'GBPJPY',
      'BTC/USD': 'BTCUSD',
      'GOLD': 'XAUUSD'
    };

    return pairMap[pair] || pair.replace('/', '');
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option
  async testConnection() {
    try {
      console.log('üß™ Testing IQ Option connection...');
      
      const testResult = await this.getCandleColor('EUR/USD', '09:00', 1);
      
      if (testResult.error) {
        return {
          success: false,
          error: testResult.error,
          message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'
        };
      }

      return {
        success: true,
        message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: testResult
      };

    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return {
        success: false,
        error: error.message,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'
      };
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
  async getMultipleCandles(pair, entryTime, rounds) {
    const results = [];
    
    for (let round = 1; round <= rounds; round++) {
      try {
        const result = await this.getCandleColor(pair, entryTime, round);
        results.push(result);
        
        // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        results.push({
          error: error.message,
          round,
          pair,
          entryTime
        });
      }
    }
    
    return results;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isMarketOpen() {
    const now = new Date();
    const hour = now.getHours();
    const day = now.getDay(); // 0 = Sunday, 6 = Saturday
    
    // ‡∏ï‡∏•‡∏≤‡∏î Forex ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
    // ‡∏õ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
    if (day === 0 || day === 6) {
      return false; // ‡∏õ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    }
    
    return true; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  getUsageStats() {
    return {
      pythonScriptPath: this.pythonScriptPath,
      marketOpen: this.isMarketOpen(),
      supportedPairs: [
        'EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CHF',
        'AUD/USD', 'NZD/USD', 'USD/CAD', 'EUR/GBP',
        'EUR/JPY', 'GBP/JPY', 'BTC/USD', 'GOLD'
      ],
      lastChecked: new Date().toISOString()
    };
  }
}

module.exports = new IQOptionService();