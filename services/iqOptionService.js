//AI-Server/services/iqOptionService.js
const { exec } = require('child_process');
const path = require('path');

class IQOptionService {
  constructor() {
    this.pythonScriptPath = path.join(__dirname, '../scripts/iq_candle_checker.py');
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å IQ Option
  async getCandleColor(pair, entryTime, round) {
    return new Promise((resolve) => {
      try {
        console.log(`üêç Calling Python script for ${pair} at ${entryTime}, round ${round}`);
  
        // üé≠ MOCK DATA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        if (process.env.NODE_ENV === 'production' || process.env.USE_MOCK === 'true') {
          console.log(`üé≠ Using MOCK data for testing`);
          
          // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
          const colors = ['green', 'red'];
          const randomColor = colors[Math.floor(Math.random() * colors.length)];
          
          // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
          const basePrice = pair === 'BTCUSD' ? 103000 : 1.0900;
          const variance = pair === 'BTCUSD' ? 100 : 0.0050;
          const open = basePrice + (Math.random() - 0.5) * variance;
          const close = randomColor === 'green' 
            ? open + Math.random() * (variance/2)
            : open - Math.random() * (variance/2);
  
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
          const [hours, minutes] = entryTime.split(':').map(Number);
          const resultTime = new Date();
          resultTime.setHours(hours, minutes + (5 * round), 0, 0);
          const displayTime = resultTime.toLocaleTimeString('th-TH', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: false 
          });
  
          const mockResult = {
            pair: this.convertPairToIQFormat(pair),
            time: displayTime,
            candleSize: "5min",
            open: Number(open.toFixed(pair === 'BTCUSD' ? 3 : 5)),
            close: Number(close.toFixed(pair === 'BTCUSD' ? 3 : 5)),
            color: randomColor,
            round,
            entryTime,
            timestamp: new Date().toISOString(),
            isMock: true // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô mock data
          };
  
          console.log(`üé≠ Mock result:`, mockResult);
          
          // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
          setTimeout(() => {
            resolve(mockResult);
          }, 2000);
          
          return;
        }
  
        // ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Python (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà production)
        const iqPair = this.convertPairToIQFormat(pair);
        const command = `/opt/render/project/src/.venv/bin/python "${this.pythonScriptPath}" "${iqPair}" "${entryTime}" ${round}`;
        
        console.log(`üîß Command: ${command}`);

        exec(command, { timeout: 60000 }, (error, stdout, stderr) => {
            console.log(`üîç Debug Info:`);
            console.log(`üìÇ Working Dir: ${process.cwd()}`);
            console.log(`üêç Python Path: ${this.pythonScriptPath}`);
            console.log(`‚úÖ File Exists: ${require('fs').existsSync(this.pythonScriptPath)}`);
            
            if (error) {
              console.error(`‚ùå Error Code: ${error.code}`);
              console.error(`‚ùå Error Signal: ${error.signal}`);
              console.error(`‚ùå Error Message: ${error.message}`);
              
              // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Python version ‡πÅ‡∏•‡∏∞ location
              exec('python --version', (err, out) => {
                console.log(`üêç Python Version: ${out || err}`);
              });
              
              exec('which python', (err, out) => {
                console.log(`üìç Python Location: ${out || err}`);
              });
              
              resolve({
                error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option ‡πÑ‡∏î‡πâ: ${error.message}`,
                pair: iqPair,
                entryTime,
                round
              });
              return;
            }
          
            if (stderr) {
              console.error(`‚ö†Ô∏è Python stderr (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î): ${stderr}`);
              // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ stderr ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ stdout ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
            }
          
            console.log(`üì§ Python stdout: "${stdout}"`);
          
            try {
              // ‡πÅ‡∏õ‡∏•‡∏á JSON result
              const result = JSON.parse(stdout.trim());
              
              if (result.error) {
                console.error(`‚ùå IQ Option API error: ${result.error}`);
                resolve({
                  error: result.error,
                  pair: iqPair,
                  entryTime,
                  round
                });
                return;
              }
          
              console.log(`‚úÖ Successfully got candle data:`, result);
              
              resolve({
                pair: result.symbol || iqPair,
                time: result.time,
                candleSize: result.candle_size,
                open: result.open,
                close: result.close,
                color: result.color, // 'green', 'red', ‡∏´‡∏£‡∏∑‡∏≠ 'doji'
                round,
                entryTime,
                timestamp: new Date().toISOString()
              });
          
            } catch (parseError) {
              console.error(`‚ùå JSON parse error: ${parseError.message}`);
              console.log(`üìù Raw stdout: "${stdout}"`);
              
              resolve({
                error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${parseError.message}`,
                rawOutput: stdout,
                pair: iqPair,
                entryTime,
                round
              });
            }
          });

      } catch (err) {
        console.error(`‚ùå Unexpected error in getCandleColor: ${err.message}`);
        resolve({
          error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`,
          pair,
          entryTime,
          round
        });
      }
    });
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IQ Option format
  convertPairToIQFormat(pair) {
    const pairMap = {
      'EUR/USD': 'EURUSD',
      'GBP/USD': 'GBPUSD',
      'USD/JPY': 'USDJPY',
      'USD/CHF': 'USDCHF',
      'AUD/USD': 'AUDUSD',
      'NZD/USD': 'NZDUSD',
      'USD/CAD': 'USDCAD',
      'EUR/GBP': 'EURGBP',
      'EUR/JPY': 'EURJPY',
      'GBP/JPY': 'GBPJPY',
      'BTC/USD': 'BTCUSD',
      'GOLD': 'XAUUSD'
    };

    return pairMap[pair] || pair.replace('/', '');
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option
  async testConnection() {
    try {
      console.log('üß™ Testing IQ Option connection...');
      
      const testResult = await this.getCandleColor('EUR/USD', '09:00', 1);
      
      if (testResult.error) {
        return {
          success: false,
          error: testResult.error,
          message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'
        };
      }

      return {
        success: true,
        message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ IQ Option ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: testResult
      };

    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return {
        success: false,
        error: error.message,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ'
      };
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
  async getMultipleCandles(pair, entryTime, rounds) {
    const results = [];
    
    for (let round = 1; round <= rounds; round++) {
      try {
        const result = await this.getCandleColor(pair, entryTime, round);
        results.push(result);
        
        // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        results.push({
          error: error.message,
          round,
          pair,
          entryTime
        });
      }
    }
    
    return results;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isMarketOpen() {
    const now = new Date();
    const hour = now.getHours();
    const day = now.getDay(); // 0 = Sunday, 6 = Saturday
    
    // ‡∏ï‡∏•‡∏≤‡∏î Forex ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
    // ‡∏õ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
    if (day === 0 || day === 6) {
      return false; // ‡∏õ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    }
    
    return true; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  getUsageStats() {
    return {
      pythonScriptPath: this.pythonScriptPath,
      marketOpen: this.isMarketOpen(),
      supportedPairs: [
        'EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CHF',
        'AUD/USD', 'NZD/USD', 'USD/CAD', 'EUR/GBP',
        'EUR/JPY', 'GBP/JPY', 'BTC/USD', 'GOLD'
      ],
      lastChecked: new Date().toISOString()
    };
  }
}

module.exports = new IQOptionService();