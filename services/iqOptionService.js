// AI-Server/services/iqOptionService.js - Complete Version + Market Hours Check
const axios = require('axios');
require('dotenv').config();

class IQOptionService {
  constructor() {
    this.baseURL = 'https://api.twelvedata.com';
    this.apiKey = process.env.TWELVE_DATA_API_KEY;
    this.timeout = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    this.requestCount = 0; // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    this.dailyLimit = 800; // Free plan limit
  }

  // üáπüá≠ Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object ‡πÉ‡∏ô Asia/Bangkok timezone
  getBangkokTime() {
    return new Date(new Date().toLocaleString("en-US", {timeZone: "Asia/Bangkok"}));
  }

  // üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Weekend Rule)
  isMarketOpen(pair) {
    try {
      const bangkokNow = this.getBangkokTime();
      const day = bangkokNow.getDay(); // 0 = Sunday, 6 = Saturday
      
      console.log(`üïê Checking market hours for ${pair} on day ${day} (Bangkok time)`);
      
      // Crypto ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î 24/7
      if (pair === 'BTC/USD' || pair === 'ETH/USD' || pair === 'LTC/USD' || pair === 'ADA/USD') {
        console.log(`‚úÖ ${pair} - Crypto market is always open`);
        return {
          isOpen: true,
          type: 'crypto',
          message: 'Cryptocurrency market is open 24/7'
        };
      }
      
      // Forex ‡πÅ‡∏•‡∏∞ GOLD ‡∏õ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
      if (day === 0 || day === 6) { // ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå
        console.log(`‚ùå ${pair} - Forex/Gold market is closed on weekends`);
        return {
          isOpen: false,
          type: pair === 'GOLD' ? 'commodity' : 'forex',
          message: `${pair === 'GOLD' ? 'Gold' : 'Forex'} market is closed on weekends`
        };
      }
      
      // ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå ‡∏ï‡∏•‡∏≤‡∏î Forex/Gold ‡πÄ‡∏õ‡∏¥‡∏î
      console.log(`‚úÖ ${pair} - Market is open on weekdays`);
      return {
        isOpen: true,
        type: pair === 'GOLD' ? 'commodity' : 'forex',
        message: `${pair === 'GOLD' ? 'Gold' : 'Forex'} market is open`
      };
      
    } catch (error) {
      console.error('‚ùå Error checking market hours:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î (safe fallback)
      return {
        isOpen: true,
        type: 'unknown',
        message: 'Unable to determine market hours, assuming open'
      };
    }
  }

  // üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
  async getCurrentCandle(pair, entryTime = null) {
    try {
      console.log(`üîç Getting current candle for ${pair}${entryTime ? ` (entry: ${entryTime})` : ''}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
      if (!this.apiKey) {
        throw new Error('‚ùå TWELVE_DATA_API_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env file');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö daily limit
      if (this.requestCount >= this.dailyLimit) {
        throw new Error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (800 requests/day)');
      }

      // ‡πÅ‡∏õ‡∏•‡∏á pair ‡πÄ‡∏õ‡πá‡∏ô Twelve Data symbol
      const twelveSymbol = this.convertToTwelveDataSymbol(pair);
      console.log(`üìä Twelve Data symbol: ${twelveSymbol}`);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á entryTime ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      const candleData = await this.getLatestCandle(twelveSymbol, entryTime);
      
      if (!candleData) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ');
      }

      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      const { open, close, datetime, high, low, volume } = candleData;
      
      console.log(`üìä Open: ${open}, Close: ${close}`);

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      let color;
      if (close > open) {
        color = "green";  // ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô)
      } else if (close < open) {
        color = "red";    // ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á)
      } else {
        color = "doji";   // ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
      }

      console.log(`üéØ Candle color: ${color}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
      const candleTime = new Date(datetime);
      // üáπüá≠ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Bangkok timezone
      const bangkokTime = new Date(candleTime.toLocaleString("en-US", {timeZone: "Asia/Bangkok"}));
      const displayTime = bangkokTime.toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit'
      });

      const result = {
        pair: pair,
        symbol: twelveSymbol,
        time: displayTime,
        datetime: datetime,
        candleSize: "5min",
        open: parseFloat(open),
        close: parseFloat(close),
        high: parseFloat(high),
        low: parseFloat(low),
        volume: parseFloat(volume) || 0,
        color: color,
        source: "Twelve Data API",
        requestCount: this.requestCount,
        timestamp: this.getBangkokTime().toISOString() // Bangkok timezone
      };

      console.log(`‚úÖ Current candle result:`, result);
      return result;

    } catch (error) {
      console.error(`‚ùå Error getting current candle: ${error.message}`);
      return {
        error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`,
        pair: pair,
        timestamp: this.getBangkokTime().toISOString() // Bangkok timezone
      };
    }
  }

  // üîç ‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  findBestMatchCandle(candles, targetDateTime) {
    let bestMatch = null;
    let smallestDiff = Infinity;
    
    console.log(`üéØ Target time (Bangkok): ${this.formatBangkokTime(targetDateTime)}`);
    
    for (const candle of candles) {
      const candleTime = new Date(candle.datetime);
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Bangkok time ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
      const candleBangkok = new Date(candleTime.toLocaleString("en-US", {timeZone: "Asia/Bangkok"}));
      const timeDiff = Math.abs(candleBangkok.getTime() - targetDateTime.getTime());
      
      const candleTimeStr = this.formatBangkokTime(candleBangkok);
      console.log(`üìä Checking candle: ${candleTimeStr} (diff: ${Math.round(timeDiff / 1000)}s)`);
      
      // ‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      if (timeDiff < smallestDiff) {
        smallestDiff = timeDiff;
        bestMatch = candle;
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if (smallestDiff > 10 * 60 * 1000) {
      console.log(`‚ö†Ô∏è Best match time difference too large: ${Math.round(smallestDiff / 1000)}s`);
      return null;
    }
    
    console.log(`üéØ Best match found with ${Math.round(smallestDiff / 1000)}s difference`);
    return bestMatch;
  }

  // üáπüá≠ Helper: ‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô Bangkok time string
  formatBangkokTime(date, options = { hour: '2-digit', minute: '2-digit' }) {
    return date.toLocaleTimeString('th-TH', options);
  }

  // üåê ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Twelve Data (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
  async getLatestCandle(twelveSymbol, entryTime = null) {
    try {
      const url = `${this.baseURL}/time_series`;
      
      const params = {
        symbol: twelveSymbol,
        interval: '5min',
        apikey: this.apiKey,
        outputsize: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 2 ‡πÄ‡∏õ‡πá‡∏ô 10 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        format: 'JSON'
      };

      console.log(`üîó Fetching latest candle: ${url}`);
      console.log(`üìä Params:`, params);

      const response = await axios.get(url, {
        params,
        timeout: this.timeout,
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; TradingBot/1.0)',
          'Accept': 'application/json'
        }
      });

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      this.requestCount++;
      console.log(`üìà API Request count: ${this.requestCount}/${this.dailyLimit}`);

      const data = response.data;
      
      if (data.status === 'error') {
        throw new Error(`Twelve Data API Error: ${data.message}`);
      }

      if (!data.values || data.values.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô Twelve Data');
      }

      console.log(`üìä Got ${data.values.length} candles from Twelve Data`);

      // üéØ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Binary Options: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° entryTime
      let targetCandle;
      
      if (entryTime) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
        const [entryHour, entryMinute] = entryTime.split(':').map(Number);
        const bangkokNow = this.getBangkokTime();
        const entryDateTime = new Date(bangkokNow);
        entryDateTime.setHours(entryHour, entryMinute, 0, 0);
        
        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î (entryTime + 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
        const targetDateTime = new Date(entryDateTime.getTime() + 5 * 60 * 1000);
        const targetTimeStr = this.formatBangkokTime(targetDateTime);
        
        console.log(`üéØ Looking for candle that closes at: ${targetTimeStr}`);
        
        // ‡∏´‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        targetCandle = this.findBestMatchCandle(data.values, targetDateTime);
        
        if (targetCandle) {
          const candleTime = new Date(targetCandle.datetime);
          const candleBangkok = new Date(candleTime.toLocaleString("en-US", {timeZone: "Asia/Bangkok"}));
          const candleTimeStr = this.formatBangkokTime(candleBangkok);
          console.log(`‚úÖ Found matching candle: ${candleTimeStr}`);
        } else {
          console.log(`‚ö†Ô∏è No exact match found, using latest closed candle`);
          // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß)
          targetCandle = data.values.length >= 2 ? data.values[1] : data.values[0];
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ entryTime ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏° (‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
        if (data.values.length >= 2) {
          targetCandle = data.values[1]; // ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß)
          console.log(`üéØ Using previous candle (closed): ${targetCandle.datetime}`);
        } else {
          targetCandle = data.values[0]; // fallback
          console.log(`‚ö†Ô∏è Using current candle (may still be active): ${targetCandle.datetime}`);
        }
      }

      return {
        datetime: targetCandle.datetime,
        open: targetCandle.open,
        close: targetCandle.close,
        high: targetCandle.high,
        low: targetCandle.low,
        volume: targetCandle.volume
      };

    } catch (error) {
      console.error(`‚ùå Twelve Data API error: ${error.message}`);
      
      if (error.response) {
        console.error(`‚ùå Response status: ${error.response.status}`);
        console.error(`‚ùå Response data:`, error.response.data);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏à‡∏≤‡∏Å API
        if (error.response.data?.message?.includes('API key')) {
          throw new Error('API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
        }
        if (error.response.data?.message?.includes('limit')) {
          throw new Error('‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API');
        }
      }
      
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Twelve Data ‡πÑ‡∏î‡πâ: ${error.message}`);
    }
  }

  // üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility)
  async getCandleColor(pair, entryTime, round) {
    try {
      console.log(`üîÑ Legacy function called: ${pair}, ${entryTime}, round ${round}`);
      console.log(`‚ö†Ô∏è Using simplified getCurrentCandle() instead`);
      
      // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô (‡∏™‡πà‡∏á entryTime ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
      const result = await this.getCurrentCandle(pair, entryTime);
      
      if (result.error) {
        return {
          error: result.error,
          pair: pair,
          entryTime: entryTime,
          round: round
        };
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
      return {
        pair: result.pair,
        time: result.time,
        candleSize: result.candleSize,
        open: result.open,
        close: result.close,
        color: result.color,
        round: round,
        entryTime: entryTime,
        actualDateTime: result.datetime,
        volume: result.volume,
        source: result.source,
        timestamp: this.getBangkokTime().toISOString() // Bangkok timezone
      };

    } catch (error) {
      console.error(`‚ùå Error in legacy getCandleColor: ${error.message}`);
      return {
        error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ: ${error.message}`,
        pair: pair,
        entryTime: entryTime,
        round: round
      };
    }
  }

  // üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô Twelve Data symbol (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  convertToTwelveDataSymbol(pair) {
    const symbolMap = {
      // Forex pairs
      'EUR/USD': 'EUR/USD',
      'EURUSD': 'EUR/USD',
      'GBP/USD': 'GBP/USD',
      'GBPUSD': 'GBP/USD',
      'USD/JPY': 'USD/JPY',
      'USDJPY': 'USD/JPY',
      'USD/CHF': 'USD/CHF',
      'USDCHF': 'USD/CHF',
      'AUD/USD': 'AUD/USD',
      'AUDUSD': 'AUD/USD',
      'NZD/USD': 'NZD/USD',
      'NZDUSD': 'NZD/USD',
      'USD/CAD': 'USD/CAD',
      'USDCAD': 'USD/CAD',
      'EUR/GBP': 'EUR/GBP',
      'EURGBP': 'EUR/GBP',
      'EUR/JPY': 'EUR/JPY',
      'EURJPY': 'EUR/JPY',
      'GBP/JPY': 'GBP/JPY',
      'GBPJPY': 'GBP/JPY',
      
      // Crypto pairs
      'BTC/USD': 'BTC/USD',
      'BTCUSD': 'BTC/USD',
      'ETH/USD': 'ETH/USD',
      'ETHUSD': 'ETH/USD',
      'LTC/USD': 'LTC/USD',
      'LTCUSD': 'LTC/USD',
      'ADA/USD': 'ADA/USD',
      'ADAUSD': 'ADA/USD',
      
      // Commodities
      'GOLD': 'XAU/USD',
      'XAUUSD': 'XAU/USD'
    };
    
    return symbolMap[pair] || 'EUR/USD';
  }

  // üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢)
  async testConnection() {
    try {
      console.log('üß™ Testing Twelve Data API connection...');
      
      if (!this.apiKey) {
        return {
          success: false,
          error: 'TWELVE_DATA_API_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env file',
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° API Key ‡πÉ‡∏ô .env file',
          method: 'Twelve Data API (Simplified)'
        };
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á entryTime ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
      const testResult = await this.getCurrentCandle('EUR/USD');
      
      if (testResult.error) {
        return {
          success: false,
          error: testResult.error,
          message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twelve Data ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
          method: 'Twelve Data API (Simplified)',
          requestCount: this.requestCount
        };
      }

      return {
        success: true,
        message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Twelve Data ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Simplified Version)',
        method: 'Twelve Data API - getCurrentCandle()',
        data: {
          pair: testResult.pair,
          time: testResult.time,
          color: testResult.color,
          price: testResult.close
        },
        requestCount: this.requestCount,
        remainingRequests: this.dailyLimit - this.requestCount
      };

    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return {
        success: false,
        error: error.message,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ',
        method: 'Twelve Data API (Simplified)',
        requestCount: this.requestCount
      };
    }
  }

  // üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing)
  async getMultipleCandles(pair, entryTime, rounds) {
    const results = [];
    
    console.log(`üîç Testing with simplified method - Getting current candle ${rounds} times`);
    
    for (let round = 1; round <= rounds; round++) {
      try {
        console.log(`üìä Test ${round}/${rounds} - Request count: ${this.requestCount}/${this.dailyLimit}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö daily limit
        if (this.requestCount >= this.dailyLimit) {
          results.push({
            error: '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
            round,
            pair,
            entryTime,
            requestCount: this.requestCount
          });
          break;
        }
        
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà getCurrentCandle() (‡∏™‡πà‡∏á entryTime ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        const result = await this.getCurrentCandle(pair, entryTime);
        result.round = round; // ‡πÄ‡∏û‡∏¥‡πà‡∏° round number
        result.entryTime = entryTime; // ‡πÄ‡∏û‡∏¥‡πà‡∏° entry time
        results.push(result);
        
        // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
        if (round < rounds) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (error) {
        results.push({
          error: error.message,
          round,
          pair,
          entryTime,
          requestCount: this.requestCount
        });
      }
    }
    
    return results;
  }

  // üìà ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï + Market Hours)
  getUsageStats() {
    const remainingRequests = Math.max(0, this.dailyLimit - this.requestCount);
    const usagePercent = Math.round((this.requestCount / this.dailyLimit) * 100);
    const bangkokNow = this.getBangkokTime();
    const day = bangkokNow.getDay();

    return {
      method: 'Twelve Data API (Simplified)',
      mainFunction: 'getCurrentCandle()',
      dataSource: 'Twelve Data Financial API',
      apiEndpoint: this.baseURL,
      timeout: `${this.timeout / 1000} seconds`,
      apiKeyConfigured: !!this.apiKey,
      requestCount: this.requestCount,
      dailyLimit: this.dailyLimit,
      remainingRequests: remainingRequests,
      usagePercent: `${usagePercent}%`,
      marketStatus: {
        forex: !(day === 0 || day === 6),  // Forex ‡∏õ‡∏¥‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        crypto: true,                      // Crypto ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î
        tradingHours: bangkokNow.getHours() >= 9 && bangkokNow.getHours() <= 17, // Trading hours 9-17
        currentDay: ['‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå'][day],
        timestamp: bangkokNow.toISOString(),
        timezone: 'Asia/Bangkok'
      },
      supportedPairs: [
        // Forex
        'EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CHF',
        'AUD/USD', 'NZD/USD', 'USD/CAD', 'EUR/GBP',
        'EUR/JPY', 'GBP/JPY',
        // Crypto  
        'BTC/USD', 'ETH/USD', 'LTC/USD', 'ADA/USD',
        // Commodities
        'XAU/USD (GOLD)'
      ],
      features: [
        '‚úÖ Weekend Market Check',
        '‚úÖ Simplified Logic',
        '‚úÖ Current Candle Only',
        '‚úÖ No Time Calculation',
        '‚úÖ 800 requests/day (Free plan)',
        '‚úÖ Real-time latest candle',
        '‚úÖ Easy to understand',
        '‚úÖ Rate limiting protection'
      ],
      advantages: [
        '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° 90%',
        '‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤',
        '‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        '‡∏•‡∏î complexity ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å',
        '‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ debug',
        '‡πÉ‡∏ä‡πâ API calls ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á',
        '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Weekend Trading Rule'
      ],
      pricing: {
        free: '800 requests/day',
        basic: '$8/month - 5,000 requests/day',
        standard: '$24/month - 15,000 requests/day'
      },
      lastChecked: this.getBangkokTime().toISOString() // Bangkok timezone
    };
  }

  // üîß ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï request counter (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  resetDailyCounter() {
    this.requestCount = 0;
    console.log('üîÑ Daily request counter reset to 0');
  }

  // üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quote ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  async getQuote(pair) {
    try {
      if (!this.apiKey) {
        throw new Error('TWELVE_DATA_API_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
      }

      const symbol = this.convertToTwelveDataSymbol(pair);
      const url = `${this.baseURL}/quote`;
      
      const params = {
        symbol: symbol,
        apikey: this.apiKey
      };

      const response = await axios.get(url, { params, timeout: this.timeout });
      this.requestCount++;

      const data = response.data;

      if (data.status === 'error') {
        throw new Error(data.message);
      }

      return {
        symbol: data.symbol,
        price: parseFloat(data.close),
        change: parseFloat(data.change),
        percent_change: data.percent_change,
        high: parseFloat(data.high),
        low: parseFloat(data.low),
        volume: parseFloat(data.volume) || 0,
        timestamp: data.datetime,
        source: 'Twelve Data',
        requestCount: this.requestCount,
        bangkokTime: this.getBangkokTime().toISOString() // Bangkok timezone
      };

    } catch (error) {
      console.error(`‚ùå Quote error: ${error.message}`);
      throw error;
    }
  }

  // üîß Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö entryTime + Market Hours)
  async debugCurrentCandle(pair, entryTime = null) {
    try {
      console.log(`üîß Debug mode - getCurrentCandle() with market hours check`);
      console.log(`üìä Pair: ${pair}`);
      console.log(`‚è∞ Entry Time: ${entryTime || 'Not specified'}`);
      console.log(`üîë API Key: ${this.apiKey ? 'Configured' : 'Not configured'}`);
      console.log(`üìà Request Count: ${this.requestCount}/${this.dailyLimit}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô
      const marketStatus = this.isMarketOpen(pair);
      console.log(`üïê Market Status:`, marketStatus);

      const twelveSymbol = this.convertToTwelveDataSymbol(pair);
      console.log(`üåê Twelve Data Symbol: ${twelveSymbol}`);

      const result = await this.getCurrentCandle(pair, entryTime);
      
      console.log(`üìä Final Result:`, JSON.stringify(result, null, 2));
      
      return {
        marketStatus,
        result
      };
    } catch (error) {
      console.error('Debug error:', error);
      return { error: error.message };
    }
  }
}

module.exports = new IQOptionService();