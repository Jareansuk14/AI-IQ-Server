const PaymentTransaction = require('../models/paymentTransaction');
const User = require('../models/user');
const creditService = require('./creditService');

class PaymentService {
  // ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  static packages = {
    '1_credit': { credits: 1, amount: 10 },
    '10_credit': { credits: 10, amount: 100 },
    '20_credit': { credits: 20, amount: 200 },
    '50_credit': { credits: 50, amount: 500 },
    '100_credit': { credits: 100, amount: 1000 }
  };

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏®‡∏©‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  async generateUniqueDecimal() {
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    // ‡∏´‡∏≤‡πÄ‡∏®‡∏©‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    const usedDecimals = await PaymentTransaction.find({
      createdAt: { $gte: tenMinutesAgo },
      status: { $in: ['pending', 'completed'] }
    }).distinct('decimalAmount');

    let decimal;
    let attempts = 0;
    const maxAttempts = 100; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop

    do {
      // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏®‡∏©‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 0.01 - 0.99
      decimal = Math.floor(Math.random() * 99) + 1;
      decimal = decimal / 100; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 0.01 - 0.99
      attempts++;
      
      if (attempts >= maxAttempts) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏®‡∏©‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    } while (usedDecimals.includes(decimal));

    return decimal;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  async createPaymentTransaction(lineUserId, packageType) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à
      if (!PaymentService.packages[packageType]) {
        throw new Error('‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const user = await User.findOne({ lineUserId });
      if (!user) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingPending = await PaymentTransaction.findOne({
        lineUserId,
        status: 'pending',
        expiresAt: { $gt: new Date() }
      });

      if (existingPending) {
        throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡πà‡∏≠‡∏ô');
      }

      const packageInfo = PaymentService.packages[packageType];
      const baseAmount = packageInfo.amount;
      const decimalAmount = await this.generateUniqueDecimal();
      const totalAmount = baseAmount + decimalAmount;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      const paymentTransaction = new PaymentTransaction({
        user: user._id,
        lineUserId,
        packageType,
        credits: packageInfo.credits,
        baseAmount,
        decimalAmount,
        totalAmount,
        expiresAt: new Date(Date.now() + 10 * 60 * 1000) // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
      });

      await paymentTransaction.save();
      return paymentTransaction;
    } catch (error) {
      console.error('Error creating payment transaction:', error);
      throw error;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  async checkPaymentFromEmail(emailData) {
    try {
      console.log('\nüîç === STARTING PAYMENT MATCHING ===');
      console.log('üìß Email ID:', emailData.id);
      console.log('üìÖ Email received at:', emailData.receivedAt);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!emailData.transactionData || emailData.transactionData.transactionType !== '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤') {
        console.log('‚ùå Not income transaction:', emailData.transactionData?.transactionType || 'No transaction data');
        return null;
      }

      const amount = emailData.transactionData.amount;
      const emailDate = emailData.transactionData.date;
      const emailTime = emailData.transactionData.time;
      const reference = emailData.transactionData.reference;

      console.log('üí∞ Transaction details from email:');
      console.log(`   Amount: ${amount} ‡∏ö‡∏≤‡∏ó`);
      console.log(`   Date: ${emailDate}`);
      console.log(`   Time: ${emailTime}`);
      console.log(`   Reference: ${reference}`);
      console.log(`   Type: ${emailData.transactionData.transactionType}`);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô Date object
      const transactionDateTime = this.parseEmailDateTime(emailDate, emailTime);
      if (!transactionDateTime) {
        console.log('‚ùå Cannot parse date/time:', emailDate, emailTime);
        return null;
      }

      console.log('üìÖ Parsed transaction datetime:', transactionDateTime.toISOString());
      console.log('üåè Local time:', transactionDateTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }));

      // ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      const pendingPayments = await PaymentTransaction.find({
        totalAmount: amount,
        status: 'pending'
      }).populate('user');

      console.log(`\nüîé Found ${pendingPayments.length} pending payment(s) with amount ${amount} ‡∏ö‡∏≤‡∏ó`);

      if (pendingPayments.length === 0) {
        console.log('‚ùå No pending payments found with this amount');
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pending ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
        const allPending = await PaymentTransaction.find({ status: 'pending' });
        console.log('\nüìã All pending payments:');
        allPending.forEach((p, index) => {
          console.log(`   ${index + 1}. Amount: ${p.totalAmount}, Created: ${p.createdAt.toISOString()}, User: ${p.lineUserId}`);
        });
        
        return null;
      }

      for (const [index, payment] of pendingPayments.entries()) {
        console.log(`\nüîç Checking payment ${index + 1}/${pendingPayments.length}:`);
        console.log(`   Payment ID: ${payment._id}`);
        console.log(`   User: ${payment.lineUserId}`);
        console.log(`   Amount: ${payment.totalAmount} ‡∏ö‡∏≤‡∏ó`);
        console.log(`   Created: ${payment.createdAt.toISOString()}`);
        console.log(`   Expires: ${payment.expiresAt.toISOString()}`);
        console.log(`   Package: ${payment.packageType} (${payment.credits} credits)`);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isExpired = payment.isExpired();
        console.log(`   üïê Is Expired: ${isExpired ? '‚ùå YES' : '‚úÖ NO'}`);
        
        if (isExpired) {
          console.log('   ‚è∞ Payment expired, skipping...');
          continue;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        const timeDiff = Math.abs(transactionDateTime.getTime() - payment.createdAt.getTime());
        const timeDiffMinutes = timeDiff / (1000 * 60);
        const isWithinTimeWindow = payment.isWithinTimeWindow(transactionDateTime);
        
        console.log(`   üìä Time comparison:`);
        console.log(`      Transaction time: ${transactionDateTime.toISOString()}`);
        console.log(`      Payment created:  ${payment.createdAt.toISOString()}`);
        console.log(`      Time difference:  ${timeDiffMinutes.toFixed(2)} minutes`);
        console.log(`      Within 10min window: ${isWithinTimeWindow ? '‚úÖ YES' : '‚ùå NO'}`);

        if (isWithinTimeWindow) {
          console.log('‚úÖ PAYMENT MATCH FOUND!');
          console.log('üîÑ Updating payment status to completed...');
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          payment.status = 'completed';
          payment.paidAt = transactionDateTime;
          payment.emailMatchId = emailData.id;
          await payment.save();

          console.log('üí≥ Adding credits to user...');
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          await creditService.updateCredit(
            payment.lineUserId, 
            payment.credits, 
            'purchase', 
            `‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ${payment.credits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (${payment.packageType})`
          );

          console.log('üéâ PAYMENT PROCESSING COMPLETED!');
          console.log(`   User: ${payment.lineUserId}`);
          console.log(`   Amount: ${amount} ‡∏ö‡∏≤‡∏ó`);
          console.log(`   Credits: ${payment.credits}`);
          console.log(`   Reference: ${reference}`);
          console.log('=== END PAYMENT MATCHING ===\n');
          
          return payment;
        } else {
          console.log('‚ùå Time window check failed');
          if (timeDiffMinutes > 10) {
            console.log(`   ‚è∞ Time difference (${timeDiffMinutes.toFixed(2)} min) exceeds 10 minutes`);
          }
        }
      }

      console.log('‚ùå No matching payment found');
      console.log('=== END PAYMENT MATCHING ===\n');
      return null;
    } catch (error) {
      console.error('‚ùå Error checking payment from email:', error);
      console.log('=== END PAYMENT MATCHING (ERROR) ===\n');
      throw error;
    }
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô Date object (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ UTC+7)
  parseEmailDateTime(dateStr, timeStr) {
    try {
      console.log(`\nüìÖ Parsing date/time: "${dateStr}" "${timeStr}"`);
      
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: dateStr = "22/05/68", timeStr = "09:22"
      if (!dateStr || !timeStr) {
        console.log('‚ùå Missing date or time string');
        return null;
      }

      // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      const [day, month, year] = dateStr.split('/');
      if (!day || !month || !year) {
        console.log('‚ùå Invalid date format, expected DD/MM/YY');
        return null;
      }

      // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
      const [hours, minutes] = timeStr.split(':');
      if (!hours || !minutes) {
        console.log('‚ùå Invalid time format, expected HH:MM');
        return null;
      }

      console.log(`   Raw parts: day=${day}, month=${month}, year=${year}, hours=${hours}, minutes=${minutes}`);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ (68 -> 2568 -> 2025)
      let fullYear = parseInt(year);
      if (fullYear < 100) {
        fullYear = fullYear + 2500; // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ.‡∏®.
        if (fullYear > 2500) {
          fullYear = fullYear - 543; // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
        }
      }

      console.log(`   Converted year: ${year} -> ${fullYear}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7)
      // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
      const localDate = new Date(
        fullYear,
        parseInt(month) - 1, // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô JavaScript ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0
        parseInt(day),
        parseInt(hours),
        parseInt(minutes),
        0
      );

      if (isNaN(localDate.getTime())) {
        console.log('‚ùå Invalid local date created');
        return null;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô UTC ‡πÇ‡∏î‡∏¢‡∏•‡∏ö 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      const utcDate = new Date(localDate.getTime() - (7 * 60 * 60 * 1000));

      console.log(`‚úÖ Local date (Thai time): ${localDate.toISOString()}`);
      console.log(`‚úÖ UTC date for comparison: ${utcDate.toISOString()}`);
      console.log(`   Bangkok time: ${utcDate.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
      
      return utcDate;
    } catch (error) {
      console.error('‚ùå Error parsing email date time:', error);
      return null;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  async expireOldTransactions() {
    try {
      const result = await PaymentTransaction.updateMany(
        {
          status: 'pending',
          expiresAt: { $lte: new Date() }
        },
        {
          status: 'expired'
        }
      );

      if (result.modifiedCount > 0) {
        console.log(`Expired ${result.modifiedCount} old payment transactions`);
      }

      return result.modifiedCount;
    } catch (error) {
      console.error('Error expiring old transactions:', error);
      throw error;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async getUserPayments(lineUserId, limit = 10) {
    try {
      const payments = await PaymentTransaction.find({ lineUserId })
        .sort({ createdAt: -1 })
        .limit(limit);

      return payments;
    } catch (error) {
      console.error('Error getting user payments:', error);
      throw error;
    }
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  async cancelPayment(paymentId, lineUserId) {
    try {
      const payment = await PaymentTransaction.findOne({
        _id: paymentId,
        lineUserId,
        status: 'pending'
      });

      if (!payment) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
      }

      payment.status = 'cancelled';
      await payment.save();

      return payment;
    } catch (error) {
      console.error('Error cancelling payment:', error);
      throw error;
    }
  }
}

module.exports = new PaymentService();