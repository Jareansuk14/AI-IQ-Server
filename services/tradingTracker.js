//AI-Server/services/tradingTracker.js - Main Tracking Service
const TradingSession = require('../models/tradingSession');
const iqOptionService = require('./iqOptionService');
const lineService = require('./lineService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class TradingTracker {
  constructor() {
    this.checkInterval = null;
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà
  async startTracking(lineUserId, pair, prediction, entryTime) {
    try {
      console.log(`Starting tracking for ${lineUserId}: ${pair} ${prediction} at ${entryTime}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingSession = await TradingSession.findOne({
        lineUserId,
        status: 'tracking'
      });
      
      if (existingSession) {
        throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
      const session = new TradingSession({
        lineUserId,
        pair,
        prediction,
        entryTime,
        entryDate: new Date()
      });
      
      await session.save();
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
      await lineService.pushMessage(lineUserId, {
        type: 'text',
        text: `üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î\n\nüìä ${pair} ${prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≠‡∏ô: ${entryTime}\n\nüìà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ\nüö´ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ`
      });
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏° scheduler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      this.startScheduler();
      
      return session;
    } catch (error) {
      console.error('Error starting tracking:', error);
      throw error;
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° scheduler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  startScheduler() {
    if (this.checkInterval) {
      return; // ‡∏°‡∏µ scheduler ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    }
    
    console.log('Starting trading tracker scheduler...');
    this.checkInterval = setInterval(async () => {
      await this.checkAllActiveSessions();
    }, 60000); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  }

  // ‡∏´‡∏¢‡∏∏‡∏î scheduler
  stopScheduler() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
      console.log('Trading tracker scheduler stopped');
    }
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async checkAllActiveSessions() {
    try {
      const activeSessions = await TradingSession.find({ status: 'tracking' });
      
      for (const session of activeSessions) {
        const nextCheckTime = session.getNextCheckTime();
        const now = new Date();
        
        // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if (now >= nextCheckTime) {
          await this.checkSessionResult(session);
        }
      }
    } catch (error) {
      console.error('Error checking active sessions:', error);
    }
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á session ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  async checkSessionResult(session) {
    try {
      console.log(`Checking result for session: ${session._id}`);
      
      const iqSymbol = iqOptionService.formatPairForIQ(session.pair);
      const checkTime = this.formatCheckTime(session.entryTime, session.currentRound);
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Python script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      const candleResult = await iqOptionService.checkCandle(iqSymbol, checkTime);
      
      if (!candleResult.success) {
        console.error('Failed to get candle data:', candleResult.error);
        return;
      }
      
      const { candleColor, openPrice, closePrice } = candleResult;
      const isCorrect = session.isCorrectPrediction(candleColor);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      session.results.push({
        round: session.currentRound,
        checkTime,
        candleColor,
        openPrice,
        closePrice,
        correct: isCorrect,
        checkedAt: new Date()
      });
      
      console.log(`Round ${session.currentRound}: ${candleColor} - ${isCorrect ? 'Correct' : 'Incorrect'}`);
      
      if (isCorrect) {
        // ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await this.completeSession(session, true);
      } else if (session.currentRound >= session.maxRounds) {
        // ‡∏Ñ‡∏£‡∏ö 7 ‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å - ‡πÅ‡∏û‡πâ
        await this.completeSession(session, false);
      } else {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠
        session.currentRound += 1;
        await session.save();
        
        // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠
        await this.sendRoundResult(session, candleColor, isCorrect);
      }
      
    } catch (error) {
      console.error('Error checking session result:', error);
    }
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ
  formatCheckTime(entryTime, round) {
    const [hours, minutes] = entryTime.split(':');
    const entryMinutes = parseInt(hours) * 60 + parseInt(minutes);
    const checkMinutes = entryMinutes + (round * 5);
    
    const checkHours = Math.floor(checkMinutes / 60) % 24;
    const checkMins = checkMinutes % 60;
    
    return `${checkHours.toString().padStart(2, '0')}:${checkMins.toString().padStart(2, '0')}`;
  }

  // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
  async sendRoundResult(session, candleColor, isCorrect) {
    const colorText = candleColor === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : 
                     candleColor === 'red' ? 'üî¥ ‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‚ö™ ‡πÄ‡∏ó‡∏≤ (‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°)';
    
    const resultText = isCorrect ? '‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å';
    const continueText = session.prediction === 'CALL' ? '‡∏£‡∏≠‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' : '‡∏£‡∏≠‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á';
    
    await lineService.pushMessage(session.lineUserId, {
      type: 'text',
      text: `üìä ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}\n\n${session.pair} ‡∏ï‡∏≠‡∏ô ${session.results[session.results.length - 1].checkTime}\n‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${colorText}\n\n‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ${resultText}\n\nüîÑ ${continueText} ‡∏ï‡πà‡∏≠‡πÑ‡∏õ...\n‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${this.formatCheckTime(session.entryTime, session.currentRound + 1)}`
    });
  }

  // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡πâ)
  async completeSession(session, won) {
    try {
      session.status = won ? 'won' : 'lost';
      session.finalResult = {
        won,
        totalRounds: session.currentRound,
        winRound: won ? session.currentRound : null
      };
      session.completedAt = new Date();
      
      await session.save();
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      await this.sendFinalResult(session, won);
      
    } catch (error) {
      console.error('Error completing session:', error);
    }
  }

  // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  async sendFinalResult(session, won) {
    const lastResult = session.results[session.results.length - 1];
    const colorText = lastResult.candleColor === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : 
                     lastResult.candleColor === 'red' ? 'üî¥ ‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‚ö™ ‡πÄ‡∏ó‡∏≤ (‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°)';
    
    if (won) {
      // ‡∏ä‡∏ô‡∏∞
      await lineService.pushMessage(session.lineUserId, {
        type: 'text',
        text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüìä ${session.pair} ${session.prediction}\n‚è∞ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound} - ${lastResult.checkTime}\n‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${colorText}\n\n‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\nüèÜ ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}/${session.maxRounds}`
      });
      
      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°
      const continueCard = createContinueTradeMessage();
      await lineService.pushMessage(session.lineUserId, continueCard);
      
    } else {
      // ‡πÅ‡∏û‡πâ
      await lineService.pushMessage(session.lineUserId, {
        type: 'text',
        text: `üòî ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüìä ${session.pair} ${session.prediction}\n‚è∞ ‡∏Ñ‡∏£‡∏ö ${session.maxRounds} ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${colorText}\n\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢\nüí™ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!`
      });
      
      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°
      const continueCard = createContinueTradeMessage();
      await lineService.pushMessage(session.lineUserId, continueCard);
    }
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async isUserTracking(lineUserId) {
    const session = await TradingSession.findOne({
      lineUserId,
      status: 'tracking'
    });
    
    return !!session;
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async cancelTracking(lineUserId) {
    try {
      const session = await TradingSession.findOne({
        lineUserId,
        status: 'tracking'
      });
      
      if (session) {
        session.status = 'cancelled';
        session.completedAt = new Date();
        await session.save();
        
        await lineService.pushMessage(lineUserId, {
          type: 'text',
          text: '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüí° ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß'
        });
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error cancelling tracking:', error);
      throw error;
    }
  }
}

module.exports = new TradingTracker();