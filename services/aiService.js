// AI-Server/services/aiService.js - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Technical Analysis

const OpenAI = require('openai');
const { exec } = require('child_process');
const path = require('path');
require('dotenv').config();

class AiService {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.AI_API_KEY
    });
    
    // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö technical analysis script
    this.technicalAnalysisScript = path.join(__dirname, '../scripts/technical_analysis_yahoo.py');
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
  async processImage(imageBuffer, command) {
    try {
      console.log('Processing image with OpenAI API...');
      console.log('Image size:', (imageBuffer.length / 1024 / 1024).toFixed(2), 'MB');
      
      const base64Image = imageBuffer.toString('base64');
      
      console.log('Sending request to OpenAI API...');
      
      const response = await this.openai.chat.completions.create({
        model: "gpt-4-turbo",
        messages: [
          {
            role: "user",
            content: [
              { type: "text", text: command },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                  detail: "high"
                }
              }
            ]
          }
        ],
        max_tokens: 1000
      });
      
      console.log('Received response from OpenAI API');
      
      if (response.choices && response.choices.length > 0) {
        return response.choices[0].message.content;
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API');
      }
    } catch (error) {
      console.error('OpenAI API error:', error);
      
      if (error.message && error.message.includes('deprecated')) {
        console.error('Model deprecated error. Trying with gpt-4 as fallback...');
        
        try {
          const base64Image = imageBuffer.toString('base64');
          
          const fallbackResponse = await this.openai.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [
              {
                role: "user",
                content: [
                  { type: "text", text: command },
                  {
                    type: "image_url",
                    image_url: {
                      url: `data:image/jpeg;base64,${base64Image}`,
                      detail: "high"
                    }
                  }
                ]
              }
            ],
            max_tokens: 1000
          });
          
          console.log('Fallback model successful');
          return fallbackResponse.choices[0].message.content;
        } catch (fallbackError) {
          console.error('Fallback attempt also failed:', fallbackError);
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ OpenAI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
        }
      }
      
      if (error.status === 401) {
        throw new Error('‡∏£‡∏´‡∏±‡∏™ API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API key');
      } else if (error.status === 400) {
        throw new Error(`‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error.message}`);
      } else if (error.status === 413) {
        throw new Error('‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      } else {
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ${error.message}`);
      }
    }
  }

  // üî• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ Technical Analysis ‡πÅ‡∏ó‡∏ô AI
  async processForexQuestion(question) {
    try {
      console.log('üîç Processing forex question with Technical Analysis...');
      console.log('Question:', question);
      
      // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
      const pair = this.extractPairFromQuestion(question);
      console.log('üìä Extracted pair:', pair);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Technical Analysis Script
      const technicalResult = await this.getTechnicalAnalysis(pair);
      
      if (technicalResult.error) {
        console.error('‚ùå Technical analysis failed:', technicalResult.error);
        // Fallback - ‡πÉ‡∏ä‡πâ smart fallback
        return {
          signal: technicalResult.fallback_signal || 'CALL',
          confidence: 'LOW',
          winChance: 50,
          reasoning: '‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÑ‡∏î‡πâ)',
          technicalData: null
        };
      }

      console.log('‚úÖ Technical analysis successful:', {
        signal: technicalResult.signal,
        confidence: technicalResult.confidence,
        score: technicalResult.technical_score
      });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞‡∏à‡∏≤‡∏Å technical score
      const winChance = this.calculateWinChance(technicalResult.technical_score, technicalResult.confidence);

      return {
        signal: technicalResult.signal,
        confidence: technicalResult.confidence,
        winChance: winChance,
        reasoning: technicalResult.reasoning,
        technicalData: technicalResult
      };

    } catch (error) {
      console.error('‚ùå Error in processForexQuestion:', error);
      
      // Final fallback
      return {
        signal: Math.random() > 0.5 ? 'CALL' : 'PUT',
        confidence: 'LOW',
        winChance: 50,
        reasoning: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
        technicalData: null
      };
    }
  }

  // üÜï ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Technical Analysis Script
  async getTechnicalAnalysis(pair) {
    return new Promise((resolve) => {
      try {
        console.log(`üêç Calling Technical Analysis for ${pair}`);

        const command = `python "${this.technicalAnalysisScript}" "${pair}"`;
        
        console.log(`üîß Command: ${command}`);

        exec(command, { timeout: 30000 }, (error, stdout, stderr) => {
          if (error) {
            console.error(`‚ùå Python execution error: ${error.message}`);
            resolve({
              error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÑ‡∏î‡πâ: ${error.message}`,
              pair,
              fallback_signal: this.getSmartFallback(pair)
            });
            return;
          }

          if (stderr) {
            console.log(`üìù Python stderr:`, stderr);
          }

          try {
            console.log(`üì§ Python stdout:`, stdout);
            
            const result = JSON.parse(stdout.trim());
            
            if (result.error) {
              console.error(`‚ùå Technical analysis error: ${result.error}`);
              resolve({
                error: result.error,
                pair,
                fallback_signal: this.getSmartFallback(pair)
              });
              return;
            }

            console.log(`‚úÖ Technical analysis data received`);
            
            resolve({
              pair: result.symbol,
              signal: result.signal,
              confidence: result.signal_analysis.confidence,
              technical_score: result.signal_analysis.technical_score,
              current_price: result.current_price,
              change_percent: result.change_percent,
              indicators: result.technical_indicators,
              bullish_signals: result.signal_analysis.bullish_signals,
              bearish_signals: result.signal_analysis.bearish_signals,
              reasoning: result.signal_analysis.reasoning,
              timestamp: new Date().toISOString(),
              source: 'Technical Analysis'
            });

          } catch (parseError) {
            console.error(`‚ùå JSON parse error: ${parseError.message}`);
            console.log(`üìù Raw stdout:`, stdout);
            
            resolve({
              error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${parseError.message}`,
              rawOutput: stdout,
              pair,
              fallback_signal: this.getSmartFallback(pair)
            });
          }
        });

      } catch (err) {
        console.error(`‚ùå Unexpected error in getTechnicalAnalysis: ${err.message}`);
        resolve({
          error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`,
          pair,
          fallback_signal: this.getSmartFallback(pair)
        });
      }
    });
  }

  // üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞‡∏à‡∏≤‡∏Å Technical Score
  calculateWinChance(score, confidence) {
    // Base percentage = 50%
    let percentage = 50;
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° score (-10 ‡∏ñ‡∏∂‡∏á +10)
    // Score +5 = ~75%, Score -5 = ~25%
    percentage = 50 + (score * 4.5);
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° confidence
    if (confidence === 'HIGH') {
      percentage += 5;  // ‡πÄ‡∏û‡∏¥‡πà‡∏° 5%
    } else if (confidence === 'LOW') {
      percentage -= 10; // ‡∏•‡∏î 10%
    }
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á 20% - 85%
    percentage = Math.max(20, Math.min(85, percentage));
    
    return Math.round(percentage);
  }

  // üîç ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
  extractPairFromQuestion(question) {
    const pairs = [
      'BTC/USD', 'ETH/USD', 'LTC/USD', 'ADA/USD',
      'EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 
      'USD/CHF', 'NZD/USD', 'USD/CAD', 'EUR/GBP',
      'EUR/JPY', 'GBP/JPY', 'GOLD'
    ];
    
    for (const pair of pairs) {
      if (question.toUpperCase().includes(pair)) {
        return pair;
      }
    }
    
    return 'EUR/USD'; // default
  }

  // üé≤ Smart Fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
  getSmartFallback(pair) {
    if (pair.includes('BTC') || pair.includes('ETH')) {
      return Math.random() > 0.4 ? 'CALL' : 'PUT'; // 60% CALL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö crypto
    }
    if (pair.includes('GOLD')) {
      return Math.random() > 0.45 ? 'CALL' : 'PUT'; // 55% CALL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gold
    }
    return Math.random() > 0.5 ? 'CALL' : 'PUT'; // 50/50 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö forex
  }

  // üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
  formatForexResponse(result, pair, targetTime, remainingCredits) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á stars ‡∏ï‡∏≤‡∏° confidence
    let stars = '';
    if (result.confidence === 'HIGH') {
      stars = '‚≠ê‚≠ê‚≠ê';
    } else if (result.confidence === 'MEDIUM') {
      stars = '‚≠ê‚≠ê';
    } else {
      stars = '‚≠ê';
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
    const formattedPair = `üí∞ ${pair} (M5)`;
    const signal = `üí° ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: ${result.signal} ${stars} (${result.confidence})`;
    const winChance = `üîç ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ä‡∏ô‡∏∞: ${result.winChance}%`;
    const entryTime = `‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≠‡∏ô: ${targetTime}`;
    const credits = `üíé ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${remainingCredits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`;

    return `${formattedPair}\n${signal}\n${winChance}\n${entryTime}\n${credits}`;
  }

  // üÜï ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Technical Analysis
  getTechnicalAnalysisStats() {
    return {
      scriptPath: this.technicalAnalysisScript,
      supportedPairs: [
        'EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD',
        'USD/CHF', 'NZD/USD', 'USD/CAD', 'EUR/GBP',
        'EUR/JPY', 'GBP/JPY', 'BTC/USD', 'ETH/USD',
        'LTC/USD', 'ADA/USD', 'GOLD'
      ],
      indicators: [
        'EMA (14, 50)',
        'Bollinger Bands (20, 2)',
        'Stochastic (14, 3, 3)'
      ],
      features: [
        '‚úÖ Real-time Technical Analysis',
        '‚úÖ Score-based Win Percentage',
        '‚úÖ Confidence Levels (HIGH/MEDIUM/LOW)',
        '‚úÖ Multiple Timeframe Analysis',
        '‚úÖ Smart Fallback System'
      ],
      winChanceRange: '20% - 85%',
      lastChecked: new Date().toISOString()
    };
  }
}

module.exports = new AiService();