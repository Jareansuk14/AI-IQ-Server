const QRCode = require('qrcode');
const generatePayload = require('promptpay-qr');

class QRCodeService {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå
  async generatePromptPayQR(amount, phoneNumber = '0812345678') {
    try {
      console.log(`Generating PromptPay QR for phone: ${phoneNumber}, amount: ${amount}`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PromptPay ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ library promptpay-qr
      const payload = generatePayload(phoneNumber, { amount });
      
      console.log('Generated PromptPay payload:', payload);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô Data URL
      const qrCodeDataURL = await QRCode.toDataURL(payload, {
        errorCorrectionLevel: 'M',
        type: 'image/png',
        quality: 0.92,
        margin: 1,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        },
        width: 512
      });

      return {
        qrCodeDataURL,
        payload,
        amount,
        phoneNumber
      };
    } catch (error) {
      console.error('Error generating PromptPay QR Code:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ: ' + error.message);
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÅ‡∏ö‡∏ö Base64 (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó)
  async generateQRCodeBase64(amount, phoneNumber = '0812345678') {
    try {
      const result = await this.generatePromptPayQR(amount, phoneNumber);
      
      // ‡πÅ‡∏õ‡∏•‡∏á Data URL ‡πÄ‡∏õ‡πá‡∏ô Base64
      const base64Data = result.qrCodeDataURL.replace(/^data:image\/png;base64,/, '');
      
      return {
        base64: base64Data,
        dataURL: result.qrCodeDataURL,
        payload: result.payload,
        amount,
        phoneNumber: result.phoneNumber
      };
    } catch (error) {
      console.error('Error generating QR Code Base64:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á QR Code (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)
  generateQRDisplayLink(paymentId, baseURL = process.env.BASE_URL || 'http://localhost:3000') {
    return `${baseURL}/api/payment/qr/${paymentId}`;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  validatePhoneNumber(phoneNumber) {
    const cleanPhone = phoneNumber.replace(/[-\s]/g, '');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ 66 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ 11 ‡∏´‡∏•‡∏±‡∏Å)
    const thaiPhonePattern = /^(0[0-9]{9}|66[0-9]{9})$/;
    
    return thaiPhonePattern.test(cleanPhone);
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö QR Code (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)
  async testQRCode(phoneNumber = '0812345678', amount = 100.50) {
    try {
      console.log('Testing PromptPay QR Code generation...');
      console.log('Input Phone:', phoneNumber);
      console.log('Input Amount:', amount);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      if (!this.validatePhoneNumber(phoneNumber)) {
        throw new Error('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
      
      const result = await this.generatePromptPayQR(amount, phoneNumber);
      
      console.log('Generated Payload Length:', result.payload.length);
      console.log('Payload:', result.payload);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á payload
      if (result.payload && result.payload.length > 0) {
        console.log('‚úÖ QR Code generation successful');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ payload ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ format ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (result.payload.startsWith('00020101')) {
          console.log('‚úÖ Payload format validation passed');
        } else {
          console.log('‚ö†Ô∏è  Payload format might be incorrect');
        }
        
        return result;
      } else {
        throw new Error('Payload is empty or invalid');
      }
    } catch (error) {
      console.error('‚ùå QR Code test failed:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î amount)
  async generatePromptPayQROpenAmount(phoneNumber = '0812345678') {
    try {
      console.log(`Generating open amount PromptPay QR for phone: ${phoneNumber}`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ amount (‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á)
      const payload = generatePayload(phoneNumber);
      
      console.log('Generated open amount PromptPay payload:', payload);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô Data URL
      const qrCodeDataURL = await QRCode.toDataURL(payload, {
        errorCorrectionLevel: 'M',
        type: 'image/png',
        quality: 0.92,
        margin: 1,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        },
        width: 512
      });

      return {
        qrCodeDataURL,
        payload,
        amount: null,
        phoneNumber
      };
    } catch (error) {
      console.error('Error generating open amount PromptPay QR Code:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î amount ‡πÑ‡∏î‡πâ: ' + error.message);
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
  async generatePromptPayQRByNationalID(nationalId, amount) {
    try {
      console.log(`Generating PromptPay QR for National ID: ${nationalId}, amount: ${amount}`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PromptPay ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
      const payload = generatePayload(nationalId, { amount });
      
      console.log('Generated PromptPay payload with National ID:', payload);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô Data URL
      const qrCodeDataURL = await QRCode.toDataURL(payload, {
        errorCorrectionLevel: 'M',
        type: 'image/png',
        quality: 0.92,
        margin: 1,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        },
        width: 512
      });

      return {
        qrCodeDataURL,
        payload,
        amount,
        nationalId
      };
    } catch (error) {
      console.error('Error generating PromptPay QR Code with National ID:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏î‡πâ: ' + error.message);
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug
  async debugQRCode(phoneNumber, amount) {
    try {
      console.log('üîç Debugging PromptPay QR Code');
      console.log('==============================');
      console.log('Phone Number:', phoneNumber);
      console.log('Amount:', amount);
      console.log('');
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ amount
      console.log('1. Testing without amount (open amount)...');
      const openResult = await this.generatePromptPayQROpenAmount(phoneNumber);
      console.log('   ‚úÖ Open amount QR generated');
      console.log('   Payload:', openResult.payload);
      console.log('');
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö amount
      console.log('2. Testing with fixed amount...');
      const fixedResult = await this.generatePromptPayQR(amount, phoneNumber);
      console.log('   ‚úÖ Fixed amount QR generated');
      console.log('   Payload:', fixedResult.payload);
      console.log('');
      
      console.log('üéØ Both QR codes generated successfully!');
      console.log('üì± Test these QR codes with your mobile banking app');
      
      return {
        openAmount: openResult,
        fixedAmount: fixedResult
      };
    } catch (error) {
      console.error('‚ùå Debug failed:', error);
      throw error;
    }
  }
}

module.exports = new QRCodeService();