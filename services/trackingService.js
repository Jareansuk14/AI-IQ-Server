//AI-Server/services/trackingService.js
const TrackingSession = require('../models/trackingSession');
const User = require('../models/user');
const candleChecker = require('./candleChecker');
const lineService = require('./lineService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class TrackingService {
  constructor() {
    this.activeTracking = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á track
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
  async startTracking(lineUserId, pair, prediction, targetTime) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingSession = await TrackingSession.findOne({
        lineUserId,
        status: 'tracking'
      });

      if (existingSession) {
        throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
      }

      // ‡∏´‡∏≤ user
      const user = await User.findOne({ lineUserId });
      if (!user) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á tracking session ‡πÉ‡∏´‡∏°‡πà
      const session = new TrackingSession({
        user: user._id,
        lineUserId,
        pair,
        prediction,
        entryTime: new Date(),
        targetTime
      });

      await session.save();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ active tracking
      this.activeTracking.set(lineUserId, session._id);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
      await lineService.pushMessage(lineUserId, {
        type: 'text',
        text: `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ${pair}\n\nüìä ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ${prediction}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: ${targetTime}\nüéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: 1/7\n\nüí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ\n‚åõ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...`
      });

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î)
      this.scheduleNextCheck(session);

      return session;
    } catch (error) {
      console.error('Error starting tracking:', error);
      throw error;
    }
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  scheduleNextCheck(session) {
    try {
      const [hour, minute] = session.targetTime.split(':');
      
      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö timezone ‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡∏ö 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
      const now = new Date();
      const adjustedNow = new Date(now.getTime() - (7 * 60 * 60 * 1000));
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      const nextCheckTime = new Date(adjustedNow);
      const checkMinute = parseInt(minute) + (session.currentRound * 5);
      
      nextCheckTime.setHours(parseInt(hour));
      nextCheckTime.setMinutes(checkMinute);
      nextCheckTime.setSeconds(0);
      nextCheckTime.setMilliseconds(0);
      
      console.log(`üìÖ Current time (adjusted): ${adjustedNow.toISOString()}`);
      console.log(`üìÖ Next check time: ${nextCheckTime.toISOString()}`);
      console.log(`üìÖ Session ${session._id} round ${session.currentRound}`);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠
      const waitTime = nextCheckTime.getTime() - adjustedNow.getTime();
      
      console.log(`‚è≥ Wait time: ${waitTime}ms (${Math.round(waitTime/1000)} seconds)`);
      
      if (waitTime > 0) {
        console.log(`üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound} ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${Math.round(waitTime/1000)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        
        setTimeout(() => {
          this.checkSessionResult(session._id);
        }, waitTime);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (wait time: ${waitTime}ms)`);
        setTimeout(() => {
          this.checkSessionResult(session._id);
        }, 5000); // ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ
      }
    } catch (error) {
      console.error('Error scheduling next check:', error);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Ç‡∏≠‡∏á session
  async checkSessionResult(sessionId) {
    try {
      const session = await TrackingSession.findById(sessionId);
      if (!session || session.status !== 'tracking') {
        console.log(`‚ùå Session ${sessionId} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ tracking`);
        return;
      }
  
      console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• session ${sessionId} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}`);
  
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ (‡∏õ‡∏£‡∏±‡∏ö timezone)
      const [hour, minute] = session.targetTime.split(':');
      const checkMinute = parseInt(minute) + ((session.currentRound - 1) * 5);
      
      // ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏Å‡∏¥‡∏ô 60
      let checkHour = parseInt(hour);
      let adjustedCheckMinute = checkMinute;
      
      if (checkMinute >= 60) {
        checkHour += Math.floor(checkMinute / 60);
        adjustedCheckMinute = checkMinute % 60;
      }
      
      const checkTime = `${checkHour.toString().padStart(2, '0')}:${adjustedCheckMinute.toString().padStart(2, '0')}`;
      
      console.log(`üïê Checking candle at time: ${checkTime}`);
      console.log(`üéØ Original target: ${session.targetTime}, Current round: ${session.currentRound}`);
  
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      const candleData = await candleChecker.checkCandle(session.pair, checkTime);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      const isCorrect = session.isCorrectPrediction(candleData.color);
      
      session.results.push({
        round: session.currentRound,
        checkTime: new Date(),
        candleColor: candleData.color,
        openPrice: candleData.open,
        closePrice: candleData.close,
        isCorrect
      });
  
      console.log(`üìä Round ${session.currentRound} result:`, {
        pair: session.pair,
        prediction: session.prediction,
        candleColor: candleData.color,
        isCorrect,
        open: candleData.open,
        close: candleData.close
      });
  
      if (isCorrect) {
        // ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!
        session.status = 'won';
        session.winRound = session.currentRound;
        session.completedAt = new Date();
        
        await session.save();
        await this.sendWinMessage(session);
        this.activeTracking.delete(session.lineUserId);
        
        console.log(`üéâ Session ${sessionId} WON in round ${session.currentRound}!`);
        
      } else if (session.isMaxRoundsReached()) {
        // ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        session.status = 'lost';
        session.completedAt = new Date();
        
        await session.save();
        await this.sendLoseMessage(session);
        this.activeTracking.delete(session.lineUserId);
        
        console.log(`üòî Session ${sessionId} LOST after ${session.maxRounds} rounds`);
        
      } else {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏∞ ‡∏ó‡∏≥‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        session.currentRound += 1;
        await session.save();
        
        await this.sendContinueMessage(session, candleData);
        this.scheduleNextCheck(session);
        
        console.log(`üîÑ Session ${sessionId} continues to round ${session.currentRound}`);
      }
  
    } catch (error) {
      console.error(`‚ùå Error checking session ${sessionId}:`, error);
      
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      try {
        const session = await TrackingSession.findById(sessionId);
        if (session) {
          await lineService.pushMessage(session.lineUserId, {
            type: 'text',
            text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          });
        }
      } catch (notifyError) {
        console.error('Error sending error notification:', notifyError);
      }
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
  async sendWinMessage(session) {
    const winText = `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\nüìä ${session.pair} ${session.prediction}\nüèÜ ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: ${session.winRound}/7\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞: ${new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}\n\n‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!`;

    await lineService.pushMessage(session.lineUserId, [
      {
        type: 'text',
        text: winText
      },
      createContinueTradeMessage()
    ]);
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
  async sendLoseMessage(session) {
    const loseText = `üòî ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair} ${session.prediction}\nüìâ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô 7 ‡∏£‡∏≠‡∏ö\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}\n\nüí™ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ!`;

    await lineService.pushMessage(session.lineUserId, [
      {
        type: 'text',
        text: loseText
      },
      createContinueTradeMessage()
    ]);
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏∞
  async sendContinueMessage(session, candleData) {
    const expectation = session.prediction === 'CALL' ? '‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : '‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á (‡∏•‡∏á)';
    const actualColor = candleData.color === 'green' ? '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : candleData.color === 'red' ? '‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‡πÇ‡∏î‡∏à‡∏¥';
    
    const continueText = `üìä ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound - 1}\n\nüíπ ${session.pair}: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏™‡∏µ${actualColor}\nüéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${expectation}\nüìà Open: ${candleData.open}\nüìâ Close: ${candleData.close}\n\n‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}/7\n‚è∞ ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`;

    await lineService.pushMessage(session.lineUserId, {
      type: 'text',
      text: continueText
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async isUserTracking(lineUserId) {
    const session = await TrackingSession.findOne({
      lineUserId,
      status: 'tracking'
    });
    return !!session;
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async cancelTracking(lineUserId) {
    try {
      const session = await TrackingSession.findOne({
        lineUserId,
        status: 'tracking'
      });

      if (session) {
        session.status = 'cancelled';
        session.completedAt = new Date();
        await session.save();
        
        this.activeTracking.delete(lineUserId);
        
        await lineService.pushMessage(lineUserId, {
          type: 'text',
          text: '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\nüí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ'
        });
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error cancelling tracking:', error);
      throw error;
    }
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async getTrackingStats(lineUserId) {
    try {
      const stats = await TrackingSession.aggregate([
        { $match: { lineUserId } },
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 },
            avgWinRound: { $avg: '$winRound' }
          }
        }
      ]);

      return stats;
    } catch (error) {
      console.error('Error getting tracking stats:', error);
      throw error;
    }
  }
}

module.exports = new TrackingService();