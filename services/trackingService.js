//AI-Server/services/trackingService.js - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
const TrackingSession = require('../models/trackingSession');
const User = require('../models/user');
const candleChecker = require('./candleChecker');
const lineService = require('./lineService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class TrackingService {
  constructor() {
    this.activeTracking = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á track
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
  async startTracking(lineUserId, pair, prediction, targetTime) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingSession = await TrackingSession.findOne({
        lineUserId,
        status: 'tracking'
      });

      if (existingSession) {
        throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
      }

      // ‡∏´‡∏≤ user
      const user = await User.findOne({ lineUserId });
      if (!user) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
      const now = new Date();
      const thaiTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Bangkok"}));
      const entryDate = thaiTime.toISOString().split('T')[0]; // YYYY-MM-DD
      
      console.log(`üìÖ Creating tracking session:`);
      console.log(`   Entry Date: ${entryDate}`);
      console.log(`   Target Time: ${targetTime}`);
      console.log(`   Prediction: ${prediction}`);
      console.log(`   Pair: ${pair}`);
      console.log(`   Current Thai Time: ${thaiTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á tracking session ‡πÉ‡∏´‡∏°‡πà
      const session = new TrackingSession({
        user: user._id,
        lineUserId,
        pair,
        prediction,
        entryTime: thaiTime,
        entryDate,
        targetTime,
        timezone: 'Asia/Bangkok',
        debugInfo: {
          originalTargetTimestamp: thaiTime.getTime(),
          scheduleInfo: []
        }
      });

      await session.save();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ active tracking
      this.activeTracking.set(lineUserId, session._id);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
      await lineService.pushMessage(lineUserId, {
        type: 'text',
        text: `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ${pair}\n\nüìä ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ${prediction}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: ${entryDate}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: ${targetTime}\nüéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: 1/7\n\nüí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ\n‚åõ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...`
      });

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î)
      this.scheduleNextCheck(session);

      return session;
    } catch (error) {
      console.error('Error starting tracking:', error);
      throw error;
    }
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤
  scheduleNextCheck(session) {
    try {
      const checkInfo = session.getCheckDateAndTime();
      const nextCheckTime = checkInfo.fullDateTime;
      
      console.log(`üìÖ Schedule Info for Round ${session.currentRound}:`);
      console.log(`   Check Date: ${checkInfo.date}`);
      console.log(`   Check Time: ${checkInfo.time}`);
      console.log(`   Is Next Day: ${checkInfo.isNextDay}`);
      console.log(`   Full DateTime: ${nextCheckTime.toISOString()}`);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠
      const waitTime = nextCheckTime.getTime() - Date.now();
      
      // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ debug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏
      console.log(`‚è∞ Debug Time Calculation:`);
      console.log(`   Next Check Time (timestamp): ${nextCheckTime.getTime()}`);
      console.log(`   Current Time (timestamp): ${Date.now()}`);
      console.log(`   Next Check Time (readable): ${nextCheckTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})}`);
      console.log(`   Current Time (readable): ${new Date().toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})}`);
      console.log(`   Wait Time (ms): ${waitTime}`);
      console.log(`   Wait Time (minutes): ${Math.round(waitTime/60000)}`);

      // üõ°Ô∏è ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
      if (waitTime > 30 * 60 * 1000) { // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        console.error(`‚ùå Wait time too long: ${Math.round(waitTime/60000)} minutes`);
        console.error(`‚ùå This indicates a timezone or calculation error`);
        
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô (5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
        const correctedWaitTime = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        console.log(`üîß Using corrected wait time: ${Math.round(correctedWaitTime/60000)} minutes`);
        
        setTimeout(() => {
          this.checkSessionResult(session._id);
        }, correctedWaitTime);
        
        return;
      }

      // üõ°Ô∏è ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ)
      if (waitTime < -10 * 60 * 1000) {
        console.error(`‚ùå Wait time too negative: ${Math.round(waitTime/60000)} minutes`);
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Å
        setTimeout(() => {
          this.checkSessionResult(session._id);
        }, 1000);
        
        return;
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug
      if (!session.debugInfo) session.debugInfo = { scheduleInfo: [] };
      session.debugInfo.scheduleInfo.push({
        round: session.currentRound,
        scheduledFor: nextCheckTime,
        actualCheckTime: null,
        timeDifference: waitTime
      });
      session.save(); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug

      if (waitTime > 0) {
        console.log(`‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound} ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${Math.round(waitTime/1000)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (${Math.round(waitTime/60000)} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
        
        setTimeout(() => {
          this.checkSessionResult(session._id);
        }, waitTime);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠)
        console.log(`‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${Math.abs(Math.round(waitTime/1000))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`);
        setTimeout(() => {
          this.checkSessionResult(session._id);
        }, 1000); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°
      }
    } catch (error) {
      console.error('Error scheduling next check:', error);
      
      // Fallback: ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      console.log('üîß Using fallback: checking in 5 minutes');
      setTimeout(() => {
        this.checkSessionResult(session._id);
      }, 5 * 60 * 1000);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Ç‡∏≠‡∏á session
  async checkSessionResult(sessionId) {
    try {
      const session = await TrackingSession.findById(sessionId);
      if (!session || session.status !== 'tracking') {
        console.log(`‚ùå Session ${sessionId} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ tracking`);
        return;
      }

      console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏• session ${sessionId} ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}`);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ
      const checkInfo = session.getCheckDateAndTime();
      
      console.log(`üìä Check Details:`);
      console.log(`   Target Date: ${checkInfo.date}`);
      console.log(`   Target Time: ${checkInfo.time}`);
      console.log(`   Is Cross Day: ${checkInfo.isNextDay}`);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug
      const debugIndex = session.debugInfo.scheduleInfo.length - 1;
      if (debugIndex >= 0) {
        session.debugInfo.scheduleInfo[debugIndex].actualCheckTime = new Date();
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
      const candleData = await candleChecker.checkCandle(session.pair, checkInfo.date, checkInfo.time);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      if (!candleData || !candleData.color) {
        throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${session.pair} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${checkInfo.date} ‡πÄ‡∏ß‡∏•‡∏≤ ${checkInfo.time}`);
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      const isCorrect = session.isCorrectPrediction(candleData.color);
      
      session.results.push({
        round: session.currentRound,
        checkTime: new Date(),
        checkDate: checkInfo.date,
        expectedTime: checkInfo.time,
        actualTime: candleData.time || checkInfo.time,
        candleColor: candleData.color,
        openPrice: candleData.open,
        closePrice: candleData.close,
        isCorrect,
        candleTimestamp: candleData.timestamp
      });

      if (isCorrect) {
        // ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!
        session.status = 'won';
        session.winRound = session.currentRound;
        session.completedAt = new Date();
        
        await session.save();
        await this.sendWinMessage(session, candleData);
        this.activeTracking.delete(session.lineUserId);
        
        console.log(`üéâ Session ${sessionId} WON in round ${session.currentRound}!`);
        
      } else if (session.isMaxRoundsReached()) {
        // ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        session.status = 'lost';
        session.completedAt = new Date();
        
        await session.save();
        await this.sendLoseMessage(session, candleData);
        this.activeTracking.delete(session.lineUserId);
        
        console.log(`üòî Session ${sessionId} LOST after ${session.maxRounds} rounds`);
        
      } else {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏∞ ‡∏ó‡∏≥‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        session.currentRound += 1;
        await session.save();
        
        await this.sendContinueMessage(session, candleData, checkInfo);
        this.scheduleNextCheck(session);
        
        console.log(`‚è≥ Session ${sessionId} continues to round ${session.currentRound}`);
      }

    } catch (error) {
      console.error(`‚ùå Error checking session ${sessionId}:`, error);
      
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      try {
        const session = await TrackingSession.findById(sessionId);
        if (session) {
          await lineService.pushMessage(session.lineUserId, {
            type: 'text',
            text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}\n\nüîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.message}\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
          });
          
          // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å session ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
          session.status = 'cancelled';
          session.completedAt = new Date();
          await session.save();
          
          this.activeTracking.delete(session.lineUserId);
        }
      } catch (notifyError) {
        console.error('Error sending error notification:', notifyError);
      }
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
  async sendWinMessage(session, candleData) {
    const checkInfo = session.getCheckDateAndTime();
    const actualColor = candleData.color === 'green' ? '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : candleData.color === 'red' ? '‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‡πÇ‡∏î‡∏à‡∏¥';
    
    const winText = `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\nüìä ${session.pair} ${session.prediction}\nüèÜ ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà: ${session.winRound}/7\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ: ${checkInfo.date}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞: ${checkInfo.time}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${actualColor}\nüìà Open: ${candleData.open}\nüìâ Close: ${candleData.close}\n\n‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!`;

    await lineService.pushMessage(session.lineUserId, [
      {
        type: 'text',
        text: winText
      },
      createContinueTradeMessage()
    ]);
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
  async sendLoseMessage(session, candleData) {
    const checkInfo = session.getCheckDateAndTime();
    const actualColor = candleData.color === 'green' ? '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : candleData.color === 'red' ? '‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‡πÇ‡∏î‡∏à‡∏¥';
    
    const loseText = `üòî ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair} ${session.prediction}\nüìâ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô ${session.maxRounds} ‡∏£‡∏≠‡∏ö\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${checkInfo.date}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${checkInfo.time}\nüïØÔ∏è ‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${actualColor}\n\nüí™ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ!`;

    await lineService.pushMessage(session.lineUserId, [
      {
        type: 'text',
        text: loseText
      },
      createContinueTradeMessage()
    ]);
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏∞
  async sendContinueMessage(session, candleData, checkInfo) {
    const expectation = session.prediction === 'CALL' ? '‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : '‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏î‡∏á (‡∏•‡∏á)';
    const actualColor = candleData.color === 'green' ? '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : candleData.color === 'red' ? '‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‡πÇ‡∏î‡∏à‡∏¥';
    
    const continueText = `üìä ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound - 1}\n\nüíπ ${session.pair}: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏™‡∏µ${actualColor}\nüéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${expectation}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ: ${checkInfo.date}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ: ${checkInfo.time}\nüìà Open: ${candleData.open}\nüìâ Close: ${candleData.close}\n\n‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}/${session.maxRounds}\n‚è∞ ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`;

    await lineService.pushMessage(session.lineUserId, {
      type: 'text',
      text: continueText
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async isUserTracking(lineUserId) {
    const session = await TrackingSession.findOne({
      lineUserId,
      status: 'tracking'
    });
    return !!session;
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async cancelTracking(lineUserId) {
    try {
      const session = await TrackingSession.findOne({
        lineUserId,
        status: 'tracking'
      });

      if (session) {
        session.status = 'cancelled';
        session.completedAt = new Date();
        await session.save();
        
        this.activeTracking.delete(lineUserId);
        
        await lineService.pushMessage(lineUserId, {
          type: 'text',
          text: '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\nüí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ'
        });
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error cancelling tracking:', error);
      throw error;
    }
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async getTrackingStats(lineUserId) {
    try {
      const stats = await TrackingSession.aggregate([
        { $match: { lineUserId } },
        {
          $group: {
            _id: '$status',
            count: { $sum: 1 },
            avgWinRound: { $avg: '$winRound' }
          }
        }
      ]);

      return stats;
    } catch (error) {
      console.error('Error getting tracking stats:', error);
      throw error;
    }
  }

  // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
  async getActiveTrackingInfo(lineUserId) {
    try {
      const session = await TrackingSession.findOne({
        lineUserId,
        status: 'tracking'
      });

      if (!session) return null;

      const checkInfo = session.getCheckDateAndTime();
      
      return {
        pair: session.pair,
        prediction: session.prediction,
        currentRound: session.currentRound,
        maxRounds: session.maxRounds,
        entryDate: session.entryDate,
        entryTime: session.targetTime,
        nextCheckDate: checkInfo.date,
        nextCheckTime: checkInfo.time,
        isNextDay: checkInfo.isNextDay,
        results: session.results
      };
    } catch (error) {
      console.error('Error getting active tracking info:', error);
      throw error;
    }
  }

  // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î sessions ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á
  async cleanupStuckSessions() {
    try {
      const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      
      const stuckSessions = await TrackingSession.find({
        status: 'tracking',
        createdAt: { $lt: cutoffTime }
      });

      if (stuckSessions.length > 0) {
        console.log(`üßπ Found ${stuckSessions.length} stuck sessions, cleaning up...`);
        
        await TrackingSession.updateMany(
          {
            status: 'tracking',
            createdAt: { $lt: cutoffTime }
          },
          {
            $set: {
              status: 'cancelled',
              completedAt: new Date()
            }
          }
        );

        // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å activeTracking
        for (const session of stuckSessions) {
          this.activeTracking.delete(session.lineUserId);
        }

        console.log(`‚úÖ Cleaned up ${stuckSessions.length} stuck sessions`);
      }
    } catch (error) {
      console.error('Error cleaning up stuck sessions:', error);
    }
  }

  // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á tracking service
  async healthCheck() {
    try {
      const activeCount = await TrackingSession.countDocuments({ status: 'tracking' });
      const memoryActiveCount = this.activeTracking.size;
      
      console.log(`üìä Tracking Service Health Check:`);
      console.log(`   Active sessions in DB: ${activeCount}`);
      console.log(`   Active sessions in memory: ${memoryActiveCount}`);
      
      // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ sync
      if (activeCount !== memoryActiveCount) {
        console.log(`‚ö†Ô∏è Mismatch detected, syncing...`);
        await this.syncActiveTracking();
      }

      return {
        dbActiveCount: activeCount,
        memoryActiveCount: memoryActiveCount,
        isHealthy: activeCount === memoryActiveCount
      };
    } catch (error) {
      console.error('Error in health check:', error);
      return { error: error.message };
    }
  }

  // üîß Sync active tracking map ‡∏Å‡∏±‡∏ö database
  async syncActiveTracking() {
    try {
      const activeSessions = await TrackingSession.find({ status: 'tracking' });
      
      // ‡∏•‡πâ‡∏≤‡∏á memory
      this.activeTracking.clear();
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      for (const session of activeSessions) {
        this.activeTracking.set(session.lineUserId, session._id);
      }
      
      console.log(`üîÑ Synced ${activeSessions.length} active sessions`);
    } catch (error) {
      console.error('Error syncing active tracking:', error);
    }
  }
}

module.exports = new TrackingService();