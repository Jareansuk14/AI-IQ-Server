//AI-Server/services/trackingService.js - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô startTracking

const TrackingSession = require('../models/trackingSession');
const iqOptionService = require('./iqOptionService');
const lineService = require('./lineService');
const User = require('../models/user'); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
const { createTrackingResultMessage, createContinueTradingMessage } = require('../utils/flexMessages');

class TrackingService {
  constructor() {
    this.activeChecks = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö setTimeout IDs
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
  async startTracking(userId, pair, prediction, entryTime) {
    try {
      console.log(`üéØ Starting tracking for ${userId}: ${pair} ${prediction} at ${entryTime}`);
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å lineUserId
      const user = await User.findOne({ lineUserId: userId });
      if (!user) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingSession = await TrackingSession.findOne({
        lineUserId: userId,
        status: 'tracking'
      });

      if (existingSession) {
        throw new Error('‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á tracking session ‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà user ObjectId)
      const session = new TrackingSession({
        user: user._id,        // ‡πÉ‡∏ä‡πâ ObjectId ‡πÅ‡∏ó‡∏ô
        lineUserId: userId,    // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
        pair,
        prediction,
        entryTime,
        entryDate: new Date()
      });

      await session.save();

      // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ${pair} ${prediction}\nüìä ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: ${entryTime}\n‚è∞ ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ\nüé≤ ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 7 ‡∏ï‡∏≤`
      });

      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å entry time)
      this.scheduleNextCheck(session);

      return session;
    } catch (error) {
      console.error('Error starting tracking:', error);
      throw error;
    }
  }

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô scheduleNextCheck ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  scheduleNextCheck(session) {
    const nextCheckTime = session.getNextCheckTime();
    const now = new Date();
    
    console.log(`Current time: ${now.toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
    console.log(`Entry time: ${session.entryTime}`);
    console.log(`Next check time: ${nextCheckTime}`);
    console.log(`Current round: ${session.currentRound}`);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô Date object
    const [hours, minutes] = nextCheckTime.split(':').map(Number);
    
    // ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ
    const checkDate = new Date();
    checkDate.setHours(hours, minutes, 0, 0);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    let delay;
    if (checkDate <= now) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÉ‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      delay = 10000;
      console.log(`‚ö†Ô∏è Check time ${nextCheckTime} has passed, checking in 10 seconds`);
    } else {
      delay = checkDate.getTime() - now.getTime();
    }
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)
    if (delay > 60 * 60 * 1000) {
      delay = 10000; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÉ‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏ó‡∏ô
      console.log(`‚ö†Ô∏è Delay too long (${delay/1000}s), checking in 10 seconds instead`);
    }
    
    console.log(`‚è∞ Next check scheduled for ${nextCheckTime} (in ${(delay/1000).toFixed(1)} seconds)`);
    
    const timeoutId = setTimeout(() => {
      this.checkResult(session._id);
    }, delay);

    this.activeChecks.set(session._id.toString(), timeoutId);
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö log ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô)
  async checkResult(sessionId) {
    try {
      const session = await TrackingSession.findById(sessionId);
      if (!session || session.status !== 'tracking') {
        console.log(`Session ${sessionId} not found or not tracking`);
        return;
      }

      const checkTime = session.getNextCheckTime();
      console.log(`üîç Checking result for ${session.pair} at ${checkTime} (Round ${session.currentRound})`);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å IQ Option
      const candleData = await iqOptionService.getCandleData(
        session.pair, 
        session.entryTime,
        session.entryDate.toISOString().split('T')[0]
      );

      console.log(`üìä Candle data received:`, candleData);

      const isCorrect = session.isWinCondition(candleData.color);
      console.log(`üéØ Prediction: ${session.prediction}, Candle: ${candleData.color}, Correct: ${isCorrect}`);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      session.results.push({
        round: session.currentRound,
        checkTime,
        candleColor: candleData.color,
        openPrice: candleData.open,
        closePrice: candleData.close,
        isCorrect,
        checkedAt: new Date()
      });

      if (isCorrect) {
        // ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!
        session.status = 'won';
        session.wonAt = new Date();
        await session.save();

        console.log(`üéâ User won! Session ${sessionId} completed`);
        await this.sendWinMessage(session);
      } else if (session.currentRound >= session.maxRounds) {
        // ‡πÅ‡∏û‡πâ‡∏Ñ‡∏£‡∏ö 7 ‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        session.status = 'lost';
        session.lostAt = new Date();
        await session.save();

        console.log(`üòî User lost after ${session.maxRounds} rounds. Session ${sessionId} completed`);
        await this.sendLoseMessage(session);
      } else {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡πà‡∏≠
        session.currentRound += 1;
        await session.save();

        console.log(`‚è≥ Round ${session.currentRound - 1} failed, continuing to round ${session.currentRound}`);
        await this.sendContinueMessage(session, candleData);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        this.scheduleNextCheck(session);
      }

      // ‡∏•‡∏ö timeout ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å map
      this.activeChecks.delete(sessionId.toString());

    } catch (error) {
      console.error('Error checking result:', error);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      const session = await TrackingSession.findById(sessionId);
      if (session) {
        await lineService.pushMessage(session.lineUserId, {
          type: 'text',
          text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•\nüí° ${error.message}\nüîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
        });
        
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å session ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        session.status = 'cancelled';
        await session.save();
      }
      
      // ‡∏•‡∏ö timeout ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å map
      this.activeChecks.delete(sessionId.toString());
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞
  async sendWinMessage(session) {
    const lastResult = session.results[session.results.length - 1];
    const winMessage = `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ${session.pair} ${session.prediction}\nüïê ‡∏ï‡∏≤ ${session.currentRound}: ${lastResult.checkTime}\nüìà ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${lastResult.candleColor === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : 'üî¥ ‡πÅ‡∏î‡∏á (‡∏•‡∏á)'}\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${lastResult.openPrice} ‚Üí ${lastResult.closePrice}\n\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!`;

    await lineService.pushMessage(session.lineUserId, {
      type: 'text',
      text: winMessage
    });

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const continueCard = createContinueTradingMessage();
    await lineService.pushMessage(session.lineUserId, continueCard);
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ
  async sendLoseMessage(session) {
    const loseMessage = `üòî ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\nüìä ${session.pair} ${session.prediction}\nüé≤ ‡∏Ñ‡∏£‡∏ö ${session.maxRounds} ‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß\n\nüìà ‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ:\n${session.results.map((r, i) => 
      `‡∏ï‡∏≤ ${i+1}: ${r.candleColor === 'green' ? 'üü¢' : 'üî¥'} ${r.isCorrect ? '‚úÖ' : '‚ùå'}`
    ).join('\n')}\n\nüí™ ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡πâ‡∏≠‡πÅ‡∏ó‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤!`;

    await lineService.pushMessage(session.lineUserId, {
      type: 'text',
      text: loseMessage
    });

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const continueCard = createContinueTradingMessage();
    await lineService.pushMessage(session.lineUserId, continueCard);
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async sendContinueMessage(session, candleData) {
    const prediction = session.prediction === 'CALL' ? '‡∏Ç‡∏∂‡πâ‡∏ô' : '‡∏•‡∏á';
    const candleText = candleData.color === 'green' ? 'üü¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô)' : candleData.color === 'red' ? 'üî¥ ‡πÅ‡∏î‡∏á (‡∏•‡∏á)' : '‚ö™ doji';
    const isCorrect = session.isWinCondition(candleData.color);
    
    const message = `üìä ‡∏ú‡∏•‡∏ï‡∏≤ ${session.currentRound - 1}/${session.maxRounds}\n\n${session.pair} ${session.prediction}\nüïê ‡πÄ‡∏ß‡∏•‡∏≤: ${session.results[session.results.length - 1].checkTime}\nüìà ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: ${candleText}\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${candleData.open} ‚Üí ${candleData.close}\n\n${isCorrect ? '‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å - ' + prediction + ' ‡∏ï‡πà‡∏≠'}\n\n‚è≥ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏≤‡∏ó‡∏µ‡πà ${session.currentRound} ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ`;

    await lineService.pushMessage(session.lineUserId, {
      type: 'text',
      text: message
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async isUserTracking(userId) {
    const session = await TrackingSession.findOne({
      lineUserId: userId,
      status: 'tracking'
    });
    return session !== null;
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async cancelTracking(userId) {
    try {
      const session = await TrackingSession.findOne({
        lineUserId: userId,
        status: 'tracking'
      });

      if (!session) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
      }

      session.status = 'cancelled';
      await session.save();

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å scheduled check
      const timeoutId = this.activeChecks.get(session._id.toString());
      if (timeoutId) {
        clearTimeout(timeoutId);
        this.activeChecks.delete(session._id.toString());
      }

      return session;
    } catch (error) {
      console.error('Error cancelling tracking:', error);
      throw error;
    }
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async getTrackingStats(userId) {
    const stats = await TrackingSession.aggregate([
      { $match: { lineUserId: userId } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          avgRounds: { $avg: '$currentRound' }
        }
      }
    ]);

    return {
      total: await TrackingSession.countDocuments({ lineUserId: userId }),
      won: stats.find(s => s._id === 'won')?.count || 0,
      lost: stats.find(s => s._id === 'lost')?.count || 0,
      cancelled: stats.find(s => s._id === 'cancelled')?.count || 0,
      tracking: stats.find(s => s._id === 'tracking')?.count || 0
    };
  }
}

module.exports = new TrackingService();