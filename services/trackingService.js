//AI-Server/services/trackingService.js - Service ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
const TrackingSession = require('../models/trackingSession');
const iqOptionService = require('./iqOptionService');
const lineService = require('./lineService');
const { createContinueTradeMessage } = require('../utils/flexMessages');

class TrackingService {
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
  async startTracking(userId, lineUserId, pair, prediction, entryTime, entryTimeString) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingSession = await TrackingSession.findOne({
        lineUserId,
        status: 'tracking'
      });

      if (existingSession) {
        throw new Error('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
      const session = new TrackingSession({
        user: userId,
        lineUserId,
        pair,
        prediction,
        entryTime: new Date(entryTime),
        entryTimeString,
        symbol: iqOptionService.convertPairToSymbol(pair)
      });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏´‡∏•‡∏±‡∏á 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
      session.calculateNextCheckTime();
      await session.save();

      console.log(`üéØ Started tracking: ${pair} ${prediction} at ${entryTimeString}`);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
      const trackingMessage = this.createTrackingStartMessage(session);
      await lineService.pushMessage(lineUserId, trackingMessage);

      return session;
    } catch (error) {
      console.error('Error starting tracking:', error);
      throw error;
    }
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
  async checkTrackingResults() {
    try {
      const now = new Date();
      console.log(`üîç Checking tracking results at ${now.toISOString()}`);

      // ‡∏´‡∏≤ sessions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•
      const sessionsToCheck = await TrackingSession.find({
        status: 'tracking',
        nextCheckTime: { $lte: now }
      }).populate('user');

      console.log(`üìä Found ${sessionsToCheck.length} sessions to check`);

      for (const session of sessionsToCheck) {
        await this.processSession(session);
      }

    } catch (error) {
      console.error('Error checking tracking results:', error);
    }
  }

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• session ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
  async processSession(session) {
    try {
      console.log(`üîÑ Processing session: ${session.pair} ${session.prediction} Round ${session.currentRound}`);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ (entry time + current round * 5 minutes)
      const checkTime = new Date(session.entryTime);
      checkTime.setMinutes(checkTime.getMinutes() + (session.currentRound - 1) * 5);
      
      const timeString = checkTime.toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false,
        timeZone: 'Asia/Bangkok'
      });
      
      const dateString = checkTime.toISOString().split('T')[0];

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å IQ Option
      const candleData = await iqOptionService.getCandleData(
        session.pair, 
        timeString, 
        dateString
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      const isCorrect = session.addResult(candleData);
      
      if (isCorrect) {
        // ‡∏ñ‡∏π‡∏Å! ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        await this.completeSession(session, 'win');
      } else if (session.currentRound >= session.maxRounds) {
        // ‡∏Ñ‡∏£‡∏ö 7 ‡∏ï‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß
        await this.completeSession(session, 'max_rounds_reached');
      } else {
        // ‡∏ú‡∏¥‡∏î ‡∏ó‡∏≥‡∏ï‡πà‡∏≠
        await this.continueSession(session);
      }

    } catch (error) {
      console.error(`Error processing session ${session._id}:`, error);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      await lineService.pushMessage(session.lineUserId, {
        type: 'text',
        text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ${session.pair}\n\nError: ${error.message}\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
      });

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
      await this.completeSession(session, 'failed');
    }
  }

  // ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á round ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  async continueSession(session) {
    session.currentRound += 1;
    session.calculateNextCheckTime();
    await session.save();

    const lastResult = session.results[session.results.length - 1];
    const continueMessage = this.createContinueMessage(session, lastResult);
    
    await lineService.pushMessage(session.lineUserId, continueMessage);
    console.log(`‚û°Ô∏è Continue tracking: ${session.pair} Round ${session.currentRound}`);
  }

  // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  async completeSession(session, finalResult) {
    session.status = 'completed';
    session.finalResult = finalResult;
    session.completedAt = new Date();
    await session.save();

    const completionMessage = this.createCompletionMessage(session);
    await lineService.pushMessage(session.lineUserId, completionMessage);
    
    console.log(`‚úÖ Completed tracking: ${session.pair} Result: ${finalResult}`);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ active tracking ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async hasActiveTracking(lineUserId) {
    const activeSession = await TrackingSession.findOne({
      lineUserId,
      status: 'tracking'
    });
    return !!activeSession;
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  async cancelTracking(lineUserId) {
    const session = await TrackingSession.findOne({
      lineUserId,
      status: 'tracking'
    });

    if (session) {
      session.status = 'completed';
      session.finalResult = 'cancelled';
      session.completedAt = new Date();
      await session.save();
      return true;
    }
    return false;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  createTrackingStartMessage(session) {
    const nextCheckTime = session.nextCheckTime.toLocaleString('th-TH', { 
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit', 
      minute: '2-digit',
      timeZone: 'Asia/Bangkok'
    });

    return {
      type: 'text',
      text: `üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•\n\nüìä ${session.pair} (M5)\nüé≤ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ${session.prediction}\n‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î: ${session.entryTimeString}\nüîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: ${nextCheckTime}\n\nüìà ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö\n‚ö†Ô∏è ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ`
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏≥‡∏ï‡πà‡∏≠
  createContinueMessage(session, lastResult) {
    const wrongResultText = session.prediction === 'CALL' ? 
      `‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏™‡∏µ‡πÅ‡∏î‡∏á (‡∏•‡∏á) ‚â† CALL` : 
      `‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô) ‚â† PUT`;

    const nextAction = session.prediction === 'CALL' ? 'CALL' : 'PUT';
    const nextTime = session.nextCheckTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: false,
      timeZone: 'Asia/Bangkok'
    });

    return {
      type: 'text',
      text: `üìä ${session.pair} (M5) - Round ${session.currentRound - 1}\n\n‚ùå ‡∏ú‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n${wrongResultText}\n\nüîÑ ‡∏ó‡∏≥‡∏ï‡πà‡∏≠ ${nextAction} ‡πÄ‡∏ß‡∏•‡∏≤ ${nextTime}\nüìà ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${session.nextCheckTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n\n‚è≥ ‡∏£‡∏≠‡∏ö ${session.currentRound}/${session.maxRounds}`
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  createCompletionMessage(session) {
    if (session.finalResult === 'win') {
      const lastResult = session.results[session.results.length - 1];
      const correctResultText = session.prediction === 'CALL' ? 
        `‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Ç‡∏∂‡πâ‡∏ô) = CALL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üéØ` : 
        `‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡∏™‡∏µ‡πÅ‡∏î‡∏á (‡∏•‡∏á) = PUT ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üéØ`;

      return [
        {
          type: 'text',
          text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ${session.pair} (M5)\n‚úÖ ${correctResultText}\nüèÜ ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${session.currentRound}\n\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á AI ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!`
        },
        createContinueTradeMessage()
      ];
    } else {
      return [
        {
          type: 'text',
          text: `üòî ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏£‡∏ö ${session.maxRounds} ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ${session.pair} (M5)\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ\n\nüí° ‡∏•‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏î‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π‡πÑ‡∏´‡∏°?`
        },
        createContinueTradeMessage()
      ];
    }
  }

  // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  async getTrackingStats(lineUserId) {
    const stats = await TrackingSession.aggregate([
      { $match: { lineUserId } },
      {
        $group: {
          _id: null,
          totalSessions: { $sum: 1 },
          wins: { $sum: { $cond: [{ $eq: ["$finalResult", "win"] }, 1, 0] } },
          loses: { $sum: { $cond: [{ $ne: ["$finalResult", "win"] }, 1, 0] } },
          avgRounds: { $avg: "$currentRound" }
        }
      }
    ]);
    
    return stats[0] || { totalSessions: 0, wins: 0, loses: 0, avgRounds: 0 };
  }
}

module.exports = new TrackingService();