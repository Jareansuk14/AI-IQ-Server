// AI-Server/controllers/lineController.js - ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Referral Cards ‡πÅ‡∏•‡∏∞ Credit/Support Cards

const lineService = require('../services/lineService');
const aiService = require('../services/aiService');
const creditService = require('../services/creditService');
const paymentService = require('../services/paymentService');
const qrCodeService = require('../services/qrCodeService');
const resultTrackingService = require('../services/resultTrackingService');
const { 
  createCreditPackagesMessage, 
  createPaymentInfoMessage,
  createForexPairsMessage,
  calculateNextTimeSlot,
  createContinueTradeMessage,
  // Referral Cards
  createReferralShareMessage,
  createReferralInputMessage,
  createReferralSuccessMessage,
  // Welcome & UI Cards
  createWelcomeMessage,
  createCreditStatusMessage,
  createSupportContactMessage
} = require('../utils/flexMessages');
const User = require('../models/user');
const Interaction = require('../models/interaction');
const Command = require('../models/command');
const CreditTransaction = require('../models/creditTransaction');

// ‡πÅ‡∏õ‡∏•‡∏á stream ‡πÄ‡∏õ‡πá‡∏ô buffer
const streamToBuffer = (stream) => {
  return new Promise((resolve, reject) => {
    const chunks = [];
    stream.on('data', (chunk) => chunks.push(chunk));
    stream.on('end', () => resolve(Buffer.concat(chunks)));
    stream.on('error', reject);
  });
};

// ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const getRandomCommand = async () => {
  try {
    const count = await Command.countDocuments({ isActive: true });
    const random = Math.floor(Math.random() * count);
    const command = await Command.findOne({ isActive: true }).skip(random);
    return command || { text: '‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ' };
  } catch (error) {
    console.error('Error getting random command:', error);
    return { text: '‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ' };
  }
};

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const saveOrUpdateUser = async (lineUserId, profile) => {
  try {
    let user = await User.findOne({ lineUserId });
    let isNewUser = false;
    
    if (!user) {
      isNewUser = true;
      user = new User({
        lineUserId,
        displayName: profile?.displayName,
        pictureUrl: profile?.pictureUrl
      });
      
      await user.save();
      
      await CreditTransaction.create({
        user: user._id,
        amount: 10,
        type: 'initial',
        description: '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà'
      });
    } else {
      user.lastInteraction = new Date();
      user.interactionCount += 1;
      
      if (profile) {
        user.displayName = profile.displayName;
        user.pictureUrl = profile.pictureUrl;
      }
      
      await user.save();
    }
    
    return { user, isNewUser };
  } catch (error) {
    console.error('Error saving/updating user:', error);
    throw error;
  }
};

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô Flex Card
const sendWelcomeMessage = async (userId, referralCode, profile = null) => {
  try {
    const displayName = profile?.displayName || '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô';
    
    // üéä ‡πÉ‡∏ä‡πâ Welcome Flex Card ‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    const welcomeCard = createWelcomeMessage(referralCode, displayName);
    
    await lineService.pushMessage(userId, welcomeCard);
    
    console.log(`‚úÖ Welcome card sent to user: ${userId} (${displayName})`);
    return true;
  } catch (error) {
    console.error('Error sending welcome card:', error);
    
    // üìù Fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Flex Card ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    try {
      await lineService.pushMessage(userId, {
        type: 'text',
        text: `üéä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û AI!\n\n‚ú® ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ü‡∏£‡∏µ\n\nüìù ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${referralCode}\n\nüí° ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 5 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 1 ‡∏Ñ‡∏ô\n\nüì∏ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!\n\nüíé ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`
      });
      console.log(`‚úÖ Fallback welcome text sent to user: ${userId}`);
      return true;
    } catch (fallbackError) {
      console.error('Error sending fallback welcome message:', fallbackError);
      return false;
    }
  }
};

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
const saveInteraction = async (user, command, imageId, aiResponse, processingTime) => {
  try {
    const interaction = new Interaction({
      user: user._id,
      command: command._id,
      commandText: command.text,
      imageId,
      aiResponse,
      processingTime
    });
    
    await interaction.save();
    return interaction;
  } catch (error) {
    console.error('Error saving interaction:', error);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏° Credit Card ‡πÅ‡∏•‡∏∞ Referral Cards
const handleSpecialCommand = async (event) => {
  const text = event.message.text.trim().toLowerCase();
  const userId = event.source.userId;
  
  try {
    if (resultTrackingService.isUserBlocked(userId)) {
      if (text === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°' || text === 'cancel' || text === 'stop') {
        const cancelled = await resultTrackingService.cancelTracking(userId);
        if (cancelled) {
          return true;
        }
      }
      
      await resultTrackingService.handleBlockedUserMessage(userId);
      return true;
    }

    // üíé ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Flex Card
    if (text === '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï' || text === 'credit' || text === '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï') {
      try {
        const credits = await creditService.checkCredit(userId);
        const profile = await lineService.getUserProfile(userId);
        const displayName = profile?.displayName || '‡∏Ñ‡∏∏‡∏ì';
        
        // üé® ‡πÉ‡∏ä‡πâ Credit Status Card ‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        const creditCard = createCreditStatusMessage(credits, displayName);
        return lineService.replyMessage(event.replyToken, creditCard);
      } catch (error) {
        console.error('Error creating credit status card:', error);
        
        // üìù Fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        const credits = await creditService.checkCredit(userId);
        return lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: `üíé ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${credits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\n\nüîÑ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"\n\nüí∞ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`
        });
      }
    }
    
    // ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
    if (text === '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï' || text === 'topup' || text === '‡πÄ‡∏ï‡∏¥‡∏°') {
      const flexMessage = createCreditPackagesMessage();
      return lineService.replyMessage(event.replyToken, flexMessage);
    }

    // üéß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
    if (text === 'support' || text === '‡∏ã‡∏±‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï' || text === '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' || 
        text === '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ã‡∏±‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï' || text === 'help' || text === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' || 
        text === 'admin' || text === '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' || text === 'customer service' || 
        text === 'cs' || text === '‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤' || text === '‡∏õ‡∏±‡∏ç‡∏´‡∏≤') {
      try {
        const supportCard = createSupportContactMessage();
        return lineService.replyMessage(event.replyToken, supportCard);
      } catch (error) {
        console.error('Error creating support contact card:', error);
        
        // üìù Fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        return lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: 'üéß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ã‡∏±‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï\n\nüí¨ ‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô: @Lovebest14\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 09:00-18:00 ‡∏ô.\nüìÖ ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡πÄ‡∏™‡∏≤‡∏£‡πå\n‚ö° ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n\nüîß ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠:\n‚Ä¢ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö AI-Auto\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™'
        });
      }
    }

    // ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
    if (text === 'ai-auto' || text === 'aiauto' || text === 'forex' || text === '‡πÄ‡∏ó‡∏£‡∏î') {
      const forexMessage = createForexPairsMessage();
      return lineService.replyMessage(event.replyToken, forexMessage);
    }
    
    // üÜï ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î
    if (text === '‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥' || text === 'referral' || text === '‡πÅ‡∏ä‡∏£‡πå' || text === 'share') {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        const referralStats = await creditService.getReferralSummary(userId);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
        const referralCard = createReferralShareMessage(
          referralStats.referralCode, 
          referralStats.totalReferred, 
          referralStats.totalEarned
        );
        return lineService.replyMessage(event.replyToken, referralCard);
      } catch (error) {
        console.error('Error creating referral share card:', error);
        return lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'
        });
      }
    }
    
    // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    if (text === '‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™' || text === '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™' || text === '‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô' || text === '‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™') {
      const inputCard = createReferralInputMessage();
      return lineService.replyMessage(event.replyToken, inputCard);
    }
    
    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    if (text.startsWith('code:') || text.startsWith('‡∏£‡∏´‡∏±‡∏™:')) {
      const referralCode = text.split(':')[1].trim();
      
      if (!referralCode) {
        return lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "CODE:ABCDEF" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏´‡∏±‡∏™:ABCDEF"'
        });
      }
      
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
        const validation = await creditService.validateReferralCode(userId, referralCode);
        if (!validation.valid) {
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: `‚ùå ${validation.reason}`
          });
        }
        
        const user = await User.findOne({ lineUserId: userId });
        const referrer = await User.findOne({ referralCode: referralCode.toUpperCase() });
        
        const result = await creditService.applyReferralCode(userId, referralCode.toUpperCase());
        
        // üÜï ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const successCard = createReferralSuccessMessage(
          {
            totalCredits: referrer.credits + 10, // ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
            totalReferred: await User.countDocuments({ referredBy: referrer.referralCode }) + 1
          },
          {
            name: user.displayName
          }
        );
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™
        await lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: `‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° 5 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\nüíé ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${result.credits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\n\nüéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥!`
        });
        
        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        await lineService.pushMessage(referrer.lineUserId, successCard);
        
        return true;
      } catch (error) {
        return lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ: ${error.message}`
        });
      }
    }
    
    return false;
  } catch (error) {
    console.error('Error handling special command:', error);
    return lineService.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'
    });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Postback Events - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏° Support ‡πÅ‡∏•‡∏∞ Credit Menu
const handlePostbackEvent = async (event) => {
  try {
    const data = event.postback.data;
    const params = new URLSearchParams(data);
    const action = params.get('action');
    const userId = event.source.userId;
    
    console.log('Handling postback event:', action, data);
    
    if (resultTrackingService.isUserBlocked(userId) && 
        !['continue_trading', 'stop_trading', 'view_referral_share', 'contact_support', 'buy_credit_menu'].includes(action)) {
      await resultTrackingService.handleBlockedUserMessage(userId);
      return;
    }
    
    switch (action) {
      // üéß Support Contact
      case 'contact_support':
        try {
          const supportCard = createSupportContactMessage();
          return lineService.replyMessage(event.replyToken, supportCard);
        } catch (error) {
          console.error('Error showing support contact:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: 'üéß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ã‡∏±‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï\n\nüí¨ ‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô: @support123\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 09:00-18:00 ‡∏ô.\nüìÖ ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡πÄ‡∏™‡∏≤‡∏£‡πå'
          });
        }

      // üí∞ Credit Menu (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å buy_credit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)
      case 'buy_credit_menu':
        try {
          const flexMessage = createCreditPackagesMessage();
          return lineService.replyMessage(event.replyToken, flexMessage);
        } catch (error) {
          console.error('Error showing credit packages:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: 'üíé ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\n\nüì¶ ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à:\n‚Ä¢ 1 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï = 10 ‡∏ö‡∏≤‡∏ó\n‚Ä¢ 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï = 100 ‡∏ö‡∏≤‡∏ó\n‚Ä¢ 20 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï = 200 ‡∏ö‡∏≤‡∏ó\n‚Ä¢ 50 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï = 500 ‡∏ö‡∏≤‡∏ó\n‚Ä¢ 100 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï = 1,000 ‡∏ö‡∏≤‡∏ó'
          });
        }

      case 'buy_credit':
        const packageType = params.get('package');
        
        try {
          const paymentTransaction = await paymentService.createPaymentTransaction(
            userId, 
            packageType
          );
          
          const baseURL = process.env.BASE_URL || 'http://localhost:3000';
          const qrCodeURL = `${baseURL}/api/payment/qr/${paymentTransaction._id}`;
          
          const paymentInfoMessage = createPaymentInfoMessage(paymentTransaction, qrCodeURL);
          
          return lineService.replyMessage(event.replyToken, paymentInfoMessage);
        } catch (error) {
          console.error('Error creating payment transaction:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ: ${error.message}\n\nüí° ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`
          });
        }
        
      case 'cancel_payment':
        const paymentId = params.get('payment_id');
        
        try {
          await paymentService.cancelPayment(paymentId, userId);
          
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\nüíé ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á'
          });
        } catch (error) {
          console.error('Error cancelling payment:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ: ${error.message}`
          });
        }

      // ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Forex ‡∏î‡πâ‡∏ß‡∏¢ Technical Analysis
      case 'forex_analysis':
        const forexPair = params.get('pair');
        
        try {
          console.log(`üîç Processing technical analysis for pair: ${forexPair}`);
          
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..." ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          await lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: `üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${forexPair}...\n\nüìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ\n‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà`
          });
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
          const profile = await lineService.getUserProfile(userId);
          const { user } = await saveOrUpdateUser(userId, profile);
          
          if (user.credits <= 0) {
            return lineService.pushMessage(userId, {
              type: 'text',
              text: '‚ö†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß\n\nüíé ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\nüéÅ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ\n\n‚ú® ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô 1 ‡∏Ñ‡∏ô = 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ!'
            });
          }

          // ‡πÉ‡∏ä‡πâ Technical Analysis
          console.log('üîç Starting technical analysis...');
          
          const analysisResult = await aiService.processForexQuestion(`‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô ${forexPair}`);
          
          console.log('üìä Technical analysis result:', {
            signal: analysisResult.signal,
            confidence: analysisResult.confidence,
            winChance: analysisResult.winChance
          });
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
          const targetTime = calculateNextTimeSlot();
          
          // ‡∏´‡∏±‡∏Å‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
          await creditService.updateCredit(userId, -1, 'use', `‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${forexPair}`);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          const remainingCredits = await creditService.checkCredit(userId);
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Technical Analysis
          const responseText = aiService.formatForexResponse(
            analysisResult,
            forexPair,
            targetTime,
            remainingCredits
          );
          
          console.log('üì§ Sending technical analysis response');
          
          // URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
          const baseURL = process.env.BASE_URL || 'http://localhost:3000';
          const imageFileName = analysisResult.signal === 'CALL' ? 'call-signal.jpg' : 'put-signal.jpg';
          const imageUrl = `${baseURL}/images/${imageFileName}`;
          
          // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ pushMessage ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ replyToken ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
          await lineService.replyMessage(replyToken, [
            // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô
            {
              type: 'image',
              originalContentUrl: imageUrl,
              previewImageUrl: imageUrl
            },
            // ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            {
              type: 'text',
              text: responseText
            }
          ]);

          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•
          await resultTrackingService.startTracking(userId, analysisResult.signal, forexPair, targetTime);
          
          return;
          
        } catch (error) {
          console.error('‚ùå Error in technical analysis:', error);
          
          return lineService.pushMessage(userId, {
            type: 'text',
            text: '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
          });
        }

      case 'continue_trading':
        try {
          const forexMessage = createForexPairsMessage();
          return lineService.replyMessage(event.replyToken, forexMessage);
        } catch (error) {
          console.error('Error showing forex pairs:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô'
          });
        }

      case 'stop_trading':
        try {
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: 'üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ AI-Auto!\n\nüéØ ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà\nüí™ ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ!\n\n‚ú® ‡∏û‡∏¥‡∏°‡∏û‡πå "AI-Auto" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          });
        } catch (error) {
          console.error('Error handling stop trading:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: 'üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!'
          });
        }
        
      // üÜï ‡πÄ‡∏Ñ‡∏™‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Referral System
      case 'view_referral_share':
        try {
          const referralStats = await creditService.getReferralSummary(userId);
          const referralCard = createReferralShareMessage(
            referralStats.referralCode, 
            referralStats.totalReferred, 
            referralStats.totalEarned
          );
          return lineService.replyMessage(event.replyToken, referralCard);
        } catch (error) {
          console.error('Error showing referral share:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'
          });
        }
        
      case 'share_to_get_referral':
        try {
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: 'üì¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:\n\n1Ô∏è‚É£ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô:\n"‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ AI Bot ‡∏´‡∏ô‡πà‡∏≠‡∏¢ üôè"\n\n2Ô∏è‚É£ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏ä‡∏£‡πå" ‡πÉ‡∏ô Bot ‡∏ô‡∏µ‡πâ\n\n3Ô∏è‚É£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏´‡∏±‡∏™ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£\n\n4Ô∏è‚É£ ‡πÄ‡∏≠‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:\n"‡∏£‡∏´‡∏±‡∏™:ABCDEF"\n\nüéÅ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ 5 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï!'
          });
        } catch (error) {
          console.error('Error showing share instruction:', error);
          return lineService.replyMessage(event.replyToken, {
            type: 'text',
            text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
          });
        }
        
      default:
        console.log('Unknown postback action:', action);
        return lineService.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ'
        });
    }
  } catch (error) {
    console.error('Error handling postback event:', error);
    return lineService.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'
    });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå follow (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô) - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á profile
const handleFollowEvent = async (event) => {
  try {
    console.log('Handling follow event:', event);
    
    const profile = await lineService.getUserProfile(event.source.userId);
    
    const { user, isNewUser } = await saveOrUpdateUser(event.source.userId, profile);
    
    // üÜï ‡∏™‡πà‡∏á profile ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Welcome Card ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ
    await sendWelcomeMessage(event.source.userId, user.referralCode, profile);
    
    console.log(`Follow event handled for user: ${profile?.displayName || event.source.userId}`);
    return true;
  } catch (error) {
    console.error('Error handling follow event:', error);
    return false;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
const handleEvent = async (event) => {
  console.log('Event type:', event.type);
  
  if (event.type === 'follow') {
    return handleFollowEvent(event);
  }
  
  if (event.type === 'postback') {
    return handlePostbackEvent(event);
  }
  
  if (event.type === 'message' && event.message.type === 'text') {
    const handled = await handleSpecialCommand(event);
    if (handled) return;
  }
  
  if (event.type !== 'message' || event.message.type !== 'image') {
    if (resultTrackingService.isUserBlocked(event.source.userId)) {
      return resultTrackingService.handleBlockedUserMessage(event.source.userId);
    }

    return lineService.replyMessage(event.replyToken, {
      type: 'text',
      text: 'üì∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n\nüí° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:\n‚Ä¢ "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" - ‡∏î‡∏π‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n‚Ä¢ "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" - ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°\n‚Ä¢ "‡πÅ‡∏ä‡∏£‡πå" - ‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n‚Ä¢ "AI-Auto" - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏π‡πà‡πÄ‡∏á‡∏¥‡∏ô Forex'
    });
  }

  if (resultTrackingService.isUserBlocked(event.source.userId)) {
    return resultTrackingService.handleBlockedUserMessage(event.source.userId);
  }

  const startTime = Date.now();
  
  try {
    const profile = await lineService.getUserProfile(event.source.userId);
    
    const { user } = await saveOrUpdateUser(event.source.userId, profile);
    
    if (user.credits <= 0) {
      return lineService.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ö†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß\n\nüíé ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\nüéÅ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"\n\n‚ú® ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô 1 ‡∏Ñ‡∏ô = 10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ!'
      });
    }
    
    const stream = await lineService.getMessageContent(event.message.id);
    const imageBuffer = await streamToBuffer(stream);
    
    const command = await getRandomCommand();
    
    const aiResponse = await aiService.processImage(imageBuffer, command.text);
    
    const processingTime = Date.now() - startTime;
    
    await saveInteraction(user, command, event.message.id, aiResponse, processingTime);
    
    await creditService.updateCredit(event.source.userId, -1, 'use', '‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
    
    const remainingCredits = await creditService.checkCredit(event.source.userId);
    
    let responseText = aiResponse;
    
    if (remainingCredits <= 3 && remainingCredits > 0) {
      responseText += `\n\n‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏≠‡∏µ‡∏Å ${remainingCredits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï\nüíé ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`;
    } else if (remainingCredits === 0) {
      responseText += '\n\n‚ö†Ô∏è ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß\nüíé ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á';
    } else {
      responseText += `\n\nüíé ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${remainingCredits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`;
    }
    
    return lineService.replyMessage(event.replyToken, {
      type: 'text',
      text: responseText
    });
  } catch (error) {
    console.error('Error processing image:', error);
    
    return lineService.replyMessage(event.replyToken, {
      type: 'text',
      text: '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n\nüí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà'
    });
  }
};

module.exports = { handleEvent };